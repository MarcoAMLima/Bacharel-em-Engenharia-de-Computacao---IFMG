

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Oct 16 20:26:25 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 1.41
    39                           ; Generated 25/01/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4550 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	smallconst
    74  000800                     __psmallconst:
    75                           	opt stack 0
    76  000800  00                 	db	0
    77  000801                     _octpowers:
    78                           	opt stack 0
    79  000801  0001               	dw	1
    80  000803  0008               	dw	8
    81  000805  0040               	dw	64
    82  000807  0200               	dw	512
    83  000809  1000               	dw	4096
    84  00080B  8000               	dw	32768
    85  00080D                     __end_of_octpowers:
    86                           	opt stack 0
    87  00080D                     _dpowers:
    88                           	opt stack 0
    89  00080D  0001               	dw	1
    90  00080F  000A               	dw	10
    91  000811  0064               	dw	100
    92  000813  03E8               	dw	1000
    93  000815  2710               	dw	10000
    94  000817                     __end_of_dpowers:
    95                           	opt stack 0
    96  000817                     _hexpowers:
    97                           	opt stack 0
    98  000817  0001               	dw	1
    99  000819  0010               	dw	16
   100  00081B  0100               	dw	256
   101  00081D  1000               	dw	4096
   102  00081F                     __end_of_hexpowers:
   103                           	opt stack 0
   104  00081F                     STR_4:
   105  00081F  20                 	db	32
   106  000820  20                 	db	32
   107  000821  20                 	db	32
   108  000822  20                 	db	32
   109  000823  20                 	db	32
   110  000824  20                 	db	32
   111  000825  20                 	db	32
   112  000826  2A                 	db	42
   113  000827  2A                 	db	42
   114  000828  2A                 	db	42
   115  000829  20                 	db	32
   116  00082A  20                 	db	32
   117  00082B  20                 	db	32
   118  00082C  20                 	db	32
   119  00082D  20                 	db	32
   120  00082E  20                 	db	32
   121  00082F  20                 	db	32
   122  000830  00                 	db	0
   123  000831                     STR_5:
   124  000831  20                 	db	32
   125  000832  20                 	db	32
   126  000833  2D                 	db	45
   127  000834  2D                 	db	45
   128  000835  2D                 	db	45
   129  000836  20                 	db	32
   130  000837  53                 	db	83	;'S'
   131  000838  43                 	db	67	;'C'
   132  000839  4F                 	db	79	;'O'
   133  00083A  52                 	db	82	;'R'
   134  00083B  45                 	db	69	;'E'
   135  00083C  20                 	db	32
   136  00083D  2D                 	db	45
   137  00083E  2D                 	db	45
   138  00083F  2D                 	db	45
   139  000840  20                 	db	32
   140  000841  20                 	db	32
   141  000842  00                 	db	0
   142  000843                     STR_3:
   143  000843  20                 	db	32
   144  000844  2D                 	db	45
   145  000845  2D                 	db	45
   146  000846  2D                 	db	45
   147  000847  20                 	db	32
   148  000848  49                 	db	73	;'I'
   149  000849  6E                 	db	110	;'n'
   150  00084A  20                 	db	32
   151  00084B  74                 	db	116	;'t'
   152  00084C  65                 	db	101	;'e'
   153  00084D  73                 	db	115	;'s'
   154  00084E  74                 	db	116	;'t'
   155  00084F  20                 	db	32
   156  000850  2D                 	db	45
   157  000851  2D                 	db	45
   158  000852  2D                 	db	45
   159  000853  20                 	db	32
   160  000854  00                 	db	0
   161  000855                     STR_2:
   162  000855  2D                 	db	45
   163  000856  2D                 	db	45
   164  000857  20                 	db	32
   165  000858  50                 	db	80	;'P'
   166  000859  72                 	db	114	;'r'
   167  00085A  65                 	db	101	;'e'
   168  00085B  73                 	db	115	;'s'
   169  00085C  73                 	db	115	;'s'
   170  00085D  20                 	db	32
   171  00085E  53                 	db	83	;'S'
   172  00085F  74                 	db	116	;'t'
   173  000860  61                 	db	97	;'a'
   174  000861  72                 	db	114	;'r'
   175  000862  74                 	db	116	;'t'
   176  000863  20                 	db	32
   177  000864  2D                 	db	45
   178  000865  2D                 	db	45
   179  000866  00                 	db	0
   180  000867                     STR_9:
   181  000867  30                 	db	48	;'0'
   182  000868  31                 	db	49	;'1'
   183  000869  32                 	db	50	;'2'
   184  00086A  33                 	db	51	;'3'
   185  00086B  34                 	db	52	;'4'
   186  00086C  35                 	db	53	;'5'
   187  00086D  36                 	db	54	;'6'
   188  00086E  37                 	db	55	;'7'
   189  00086F  38                 	db	56	;'8'
   190  000870  39                 	db	57	;'9'
   191  000871  41                 	db	65	;'A'
   192  000872  42                 	db	66	;'B'
   193  000873  43                 	db	67	;'C'
   194  000874  44                 	db	68	;'D'
   195  000875  45                 	db	69	;'E'
   196  000876  46                 	db	70	;'F'
   197  000877  00                 	db	0
   198  000878                     STR_10:
   199  000878  30                 	db	48	;'0'
   200  000879  31                 	db	49	;'1'
   201  00087A  32                 	db	50	;'2'
   202  00087B  33                 	db	51	;'3'
   203  00087C  34                 	db	52	;'4'
   204  00087D  35                 	db	53	;'5'
   205  00087E  36                 	db	54	;'6'
   206  00087F  37                 	db	55	;'7'
   207  000880  38                 	db	56	;'8'
   208  000881  39                 	db	57	;'9'
   209  000882  61                 	db	97	;'a'
   210  000883  62                 	db	98	;'b'
   211  000884  63                 	db	99	;'c'
   212  000885  64                 	db	100	;'d'
   213  000886  65                 	db	101	;'e'
   214  000887  66                 	db	102	;'f'
   215  000888  00                 	db	0
   216  000889                     STR_1:
   217  000889  20                 	db	32
   218  00088A  53                 	db	83	;'S'
   219  00088B  45                 	db	69	;'E'
   220  00088C  4D                 	db	77	;'M'
   221  00088D  41                 	db	65	;'A'
   222  00088E  50                 	db	80	;'P'
   223  00088F  48                 	db	72	;'H'
   224  000890  4F                 	db	79	;'O'
   225  000891  52                 	db	82	;'R'
   226  000892  45                 	db	69	;'E'
   227  000893  20                 	db	32
   228  000894  54                 	db	84	;'T'
   229  000895  45                 	db	69	;'E'
   230  000896  53                 	db	83	;'S'
   231  000897  54                 	db	84	;'T'
   232  000898  20                 	db	32
   233  000899  00                 	db	0
   234  00089A                     STR_7:
   235  00089A  20                 	db	32
   236  00089B  45                 	db	69	;'E'
   237  00089C  72                 	db	114	;'r'
   238  00089D  72                 	db	114	;'r'
   239  00089E  6F                 	db	111	;'o'
   240  00089F  72                 	db	114	;'r'
   241  0008A0  73                 	db	115	;'s'
   242  0008A1  3A                 	db	58	;':'
   243  0008A2  25                 	db	37
   244  0008A3  64                 	db	100	;'d'
   245  0008A4  20                 	db	32
   246  0008A5  00                 	db	0
   247  0008A6                     STR_6:
   248  0008A6  41                 	db	65	;'A'
   249  0008A7  63                 	db	99	;'c'
   250  0008A8  65                 	db	101	;'e'
   251  0008A9  72                 	db	114	;'r'
   252  0008AA  74                 	db	116	;'t'
   253  0008AB  73                 	db	115	;'s'
   254  0008AC  3A                 	db	58	;':'
   255  0008AD  25                 	db	37
   256  0008AE  64                 	db	100	;'d'
   257  0008AF  20                 	db	32
   258  0008B0  00                 	db	0
   259  0008B1                     STR_8:
   260  0008B1  28                 	db	40
   261  0008B2  6E                 	db	110	;'n'
   262  0008B3  75                 	db	117	;'u'
   263  0008B4  6C                 	db	108	;'l'
   264  0008B5  6C                 	db	108	;'l'
   265  0008B6  29                 	db	41
   266  0008B7  00                 	db	0
   267                           
   268                           ; #config settings
   269  0008B8  00                 	db	0	; dummy byte at the end
   270  0000                     
   271                           	psect	nvCOMRAM
   272  000047                     __pnvCOMRAM:
   273                           	opt stack 0
   274  000047                     _estado:
   275                           	opt stack 0
   276  000047                     	ds	2
   277  0000                     _TMR0	set	4054
   278  0000                     _TRISBbits	set	3987
   279  0000                     _TRISB	set	3987
   280  0000                     _PORTB	set	3969
   281  0000                     _LATBbits	set	3978
   282  0000                     _PORTDbits	set	3971
   283  0000                     _TRISC	set	3988
   284  0000                     _ADCON1	set	4033
   285  0000                     _INTCONbits	set	4082
   286  0000                     _T0CONbits	set	4053
   287  0000                     _LATCbits	set	3979
   288  0000                     _TRISCbits	set	3988
   289  0000                     _TMR0IF	set	32658
   290                           
   291                           	psect	cinit
   292  0017FE                     __pcinit:
   293                           	opt stack 0
   294  0017FE                     start_initialization:
   295                           	opt stack 0
   296  0017FE                     __initialization:
   297                           	opt stack 0
   298                           
   299                           ; Clear objects allocated to COMRAM (24 bytes)
   300  0017FE  EE00  F02F         	lfsr	0,__pbssCOMRAM
   301  001802  0E18               	movlw	24
   302  001804                     clear_0:
   303  001804  6AEE               	clrf	postinc0,c
   304  001806  06E8               	decf	wreg,f,c
   305  001808  E1FD               	bnz	clear_0
   306  00180A                     end_of_initialization:
   307                           	opt stack 0
   308  00180A                     __end_of__initialization:
   309                           	opt stack 0
   310  00180A  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   311  00180C  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   312  00180E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   313  001810  6EF8               	movwf	tblptru,c
   314  001812  0100               	movlb	0
   315  001814  EFF2  F009         	goto	_main	;jump to C main() function
   316                           tblptru	equ	0xFF8
   317                           postinc0	equ	0xFEE
   318                           wreg	equ	0xFE8
   319                           
   320                           	psect	bssCOMRAM
   321  00002F                     __pbssCOMRAM:
   322                           	opt stack 0
   323  00002F                     _temp:
   324                           	opt stack 0
   325  00002F                     	ds	2
   326  000031                     _flag_tela:
   327                           	opt stack 0
   328  000031                     	ds	2
   329  000033                     _cont:
   330                           	opt stack 0
   331  000033                     	ds	2
   332  000035                     _erros:
   333                           	opt stack 0
   334  000035                     	ds	1
   335  000036                     _acertos:
   336                           	opt stack 0
   337  000036                     	ds	1
   338  000037                     _tela:
   339                           	opt stack 0
   340  000037                     	ds	16
   341                           tblptru	equ	0xFF8
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           
   345                           	psect	cstackBANK0
   346  000060                     __pcstackBANK0:
   347                           	opt stack 0
   348  000060                     sprintf@idx:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x0
   352  000060                     	ds	1
   353  000061                     _sprintf$363:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x1
   357  000061                     	ds	2
   358  000063                     _sprintf$364:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x3
   362  000063                     	ds	2
   363  000065                     _sprintf$370:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x5
   367  000065                     	ds	2
   368  000067                     sprintf@cp:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0x7
   372  000067                     	ds	2
   373  000069                     sprintf@len:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x9
   377  000069                     	ds	2
   378  00006B                     sprintf@ap:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0xB
   382  00006B                     	ds	2
   383  00006D                     sprintf@val:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0xD
   387  00006D                     	ds	2
   388  00006F                     sprintf@prec:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0xF
   392  00006F                     	ds	1
   393  000070                     sprintf@width:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x10
   397  000070                     	ds	2
   398  000072                     sprintf@c:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x12
   402  000072                     	ds	1
   403  000073                     sprintf@flag:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x13
   407  000073                     	ds	2
   408                           tblptru	equ	0xFF8
   409                           postinc0	equ	0xFEE
   410                           wreg	equ	0xFE8
   411                           
   412                           	psect	cstackCOMRAM
   413  000001                     __pcstackCOMRAM:
   414                           	opt stack 0
   415  000001                     ??_AlternaModo:
   416  000001                     
   417                           ; 1 bytes @ 0x0
   418  000001                     	ds	2
   419  000003                     ??_pic_ist:
   420                           
   421                           ; 1 bytes @ 0x2
   422  000003                     	ds	17
   423  000014                     ??_Delay10KTCYx:
   424  000014                     ??_isdigit:
   425  000014                     ?___wmul:
   426                           	opt stack 0
   427  000014                     ?___lwdiv:
   428                           	opt stack 0
   429  000014                     Delay10TCYx@unit:
   430                           	opt stack 0
   431  000014                     Delay1KTCYx@unit:
   432                           	opt stack 0
   433  000014                     ___wmul@multiplier:
   434                           	opt stack 0
   435  000014                     ___lwdiv@dividend:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x13
   439  000014                     	ds	1
   440  000015                     ??_SetDDRamAddr:
   441  000015                     WriteCmdXLCD@cmd:
   442                           	opt stack 0
   443  000015                     WriteDataXLCD@data:
   444                           	opt stack 0
   445  000015                     Delay10KTCYx@unit:
   446                           	opt stack 0
   447  000015                     _isdigit$940:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x14
   451  000015                     	ds	1
   452  000016                     isdigit@c:
   453                           	opt stack 0
   454  000016                     putrsXLCD@buffer:
   455                           	opt stack 0
   456  000016                     ___wmul@multiplicand:
   457                           	opt stack 0
   458  000016                     ___lwdiv@divisor:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x15
   462  000016                     	ds	2
   463  000018                     SetDDRamAddr@DDaddr:
   464                           	opt stack 0
   465  000018                     ___lwdiv@counter:
   466                           	opt stack 0
   467  000018                     ___wmul@product:
   468                           	opt stack 0
   469                           
   470                           ; 2 bytes @ 0x17
   471  000018                     	ds	1
   472  000019                     OpenXLCD@lcdtype:
   473                           	opt stack 0
   474  000019                     ___lwdiv@quotient:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x18
   478  000019                     	ds	1
   479  00001A                     
   480                           ; 1 bytes @ 0x19
   481  00001A                     	ds	1
   482  00001B                     ?___lwmod:
   483                           	opt stack 0
   484  00001B                     ___lwmod@dividend:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x1A
   488  00001B                     	ds	2
   489  00001D                     ___lwmod@divisor:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x1C
   493  00001D                     	ds	2
   494  00001F                     ___lwmod@counter:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x1E
   498  00001F                     	ds	1
   499  000020                     ?_sprintf:
   500                           	opt stack 0
   501  000020                     sprintf@sp:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x1F
   505  000020                     	ds	2
   506  000022                     sprintf@f:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x21
   510  000022                     	ds	8
   511  00002A                     ??_sprintf:
   512                           
   513                           ; 1 bytes @ 0x29
   514  00002A                     	ds	4
   515  00002E                     AtualizaTela@flag_tela:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x2D
   519  00002E                     	ds	1
   520  00002F                     tblptru	equ	0xFF8
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           
   524                           ; 1 bytes @ 0x2E
   525 ;;
   526 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   527 ;;
   528 ;; *************** function _main *****************
   529 ;; Defined at:
   530 ;;		line 162 in file "mainzinha.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;		None
   533 ;; Auto vars:     Size  Location     Type
   534 ;;		None
   535 ;; Return value:  Size  Location     Type
   536 ;;                  1    wreg      void 
   537 ;; Registers used:
   538 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : 0/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   544 ;;      Params:         0       0       0       0       0       0       0       0       0
   545 ;;      Locals:         0       0       0       0       0       0       0       0       0
   546 ;;      Temps:          0       0       0       0       0       0       0       0       0
   547 ;;      Totals:         0       0       0       0       0       0       0       0       0
   548 ;;Total ram usage:        0 bytes
   549 ;; Hardware stack levels required when called:    7
   550 ;; This function calls:
   551 ;;		_AtualizaTela
   552 ;;		_Delay10KTCYx
   553 ;;		_config_inicial
   554 ;;		_init
   555 ;;		_init_XLCD
   556 ;; This function is called by:
   557 ;;		Startup code after reset
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           	psect	text0
   562  0013E4                     __ptext0:
   563                           	opt stack 0
   564  0013E4                     _main:
   565                           	opt stack 24
   566                           
   567                           ;mainzinha.c: 163: ADCON1= 0x0F;
   568                           
   569                           ;incstack = 0
   570  0013E4  0E0F               	movlw	15
   571  0013E6  6EC1               	movwf	4033,c	;volatile
   572                           
   573                           ;mainzinha.c: 164: TRISC = 0x00;
   574  0013E8  0E00               	movlw	0
   575  0013EA  6E94               	movwf	3988,c	;volatile
   576                           
   577                           ;mainzinha.c: 165: estado = 3;
   578  0013EC  0E00               	movlw	0
   579  0013EE  6E48               	movwf	_estado+1,c
   580  0013F0  0E03               	movlw	3
   581  0013F2  6E47               	movwf	_estado,c
   582                           
   583                           ;mainzinha.c: 166: init_XLCD();
   584  0013F4  ECE1  F00B         	call	_init_XLCD	;wreg free
   585                           
   586                           ;mainzinha.c: 167: config_inicial();
   587  0013F8  ECD0  F00B         	call	_config_inicial	;wreg free
   588                           
   589                           ;mainzinha.c: 169: T0CONbits.TMR0ON = 0;
   590  0013FC  9ED5               	bcf	4053,7,c	;volatile
   591                           
   592                           ;mainzinha.c: 171: INTCONbits.TMR0IE = 1;
   593  0013FE  8AF2               	bsf	intcon,5,c	;volatile
   594                           
   595                           ;mainzinha.c: 172: INTCONbits.TMR0IF = 0;
   596  001400  94F2               	bcf	intcon,2,c	;volatile
   597                           
   598                           ;mainzinha.c: 174: T0CONbits.T08BIT = 0;
   599  001402  9CD5               	bcf	4053,6,c	;volatile
   600                           
   601                           ;mainzinha.c: 175: T0CONbits.PSA = 0;
   602  001404  96D5               	bcf	4053,3,c	;volatile
   603                           
   604                           ;mainzinha.c: 176: T0CONbits.T0PS0 = 1;
   605  001406  80D5               	bsf	4053,0,c	;volatile
   606                           
   607                           ;mainzinha.c: 177: T0CONbits.T0PS1 = 0;
   608  001408  92D5               	bcf	4053,1,c	;volatile
   609                           
   610                           ;mainzinha.c: 178: T0CONbits.T0PS2 = 1;
   611  00140A  84D5               	bsf	4053,2,c	;volatile
   612                           
   613                           ;mainzinha.c: 179: T0CONbits.T0CS = 0;
   614  00140C  9AD5               	bcf	4053,5,c	;volatile
   615                           
   616                           ;mainzinha.c: 181: TMR0 = 0;
   617  00140E  0E00               	movlw	0
   618  001410  6ED7               	movwf	4055,c	;volatile
   619  001412  0E00               	movlw	0
   620  001414  6ED6               	movwf	4054,c	;volatile
   621                           
   622                           ;mainzinha.c: 183: T0CONbits.TMR0ON = 1;
   623  001416  8ED5               	bsf	4053,7,c	;volatile
   624                           
   625                           ;mainzinha.c: 185: INTCONbits.GIEH = 1;
   626  001418  8EF2               	bsf	intcon,7,c	;volatile
   627                           
   628                           ;mainzinha.c: 186: INTCONbits.GIEL = 1;
   629  00141A  8CF2               	bsf	intcon,6,c	;volatile
   630                           
   631                           ;mainzinha.c: 187: init();
   632  00141C  EC27  F00C         	call	_init	;wreg free
   633                           
   634                           ;mainzinha.c: 188: AtualizaTela(flag_tela);
   635  001420  5031               	movf	_flag_tela,w,c
   636  001422  EC66  F009         	call	_AtualizaTela
   637                           
   638                           ;mainzinha.c: 189: Delay10KTCYx (180);
   639  001426  0EB4               	movlw	180
   640  001428  EC0C  F00C         	call	_Delay10KTCYx
   641                           
   642                           ;mainzinha.c: 190: if(PORTDbits.RD0 == 1){
   643  00142C  A083               	btfss	3971,0,c	;volatile
   644  00142E  EF67  F000         	goto	start
   645                           
   646                           ;mainzinha.c: 191: Delay10KTCYx (180);
   647  001432  0EB4               	movlw	180
   648  001434  EC0C  F00C         	call	_Delay10KTCYx
   649                           
   650                           ;mainzinha.c: 192: flag_tela = 1;
   651  001438  0E00               	movlw	0
   652  00143A  6E32               	movwf	_flag_tela+1,c
   653  00143C  0E01               	movlw	1
   654  00143E  6E31               	movwf	_flag_tela,c
   655                           
   656                           ;mainzinha.c: 193: AtualizaTela(flag_tela);
   657  001440  5031               	movf	_flag_tela,w,c
   658  001442  EC66  F009         	call	_AtualizaTela
   659  001446                     l2837:
   660                           
   661                           ;mainzinha.c: 196: if((PORTDbits.RD1 == 1)&&(LATCbits.LATC0 == 1)){
   662  001446  B283               	btfsc	3971,1,c	;volatile
   663  001448  A08B               	btfss	3979,0,c	;volatile
   664  00144A  D004               	goto	l98
   665                           
   666                           ;mainzinha.c: 197: Delay10KTCYx (180);
   667  00144C  0EB4               	movlw	180
   668  00144E  EC0C  F00C         	call	_Delay10KTCYx
   669  001452  D00D               	goto	l2855
   670  001454                     l98:
   671  001454  B483               	btfsc	3971,2,c	;volatile
   672  001456  A28B               	btfss	3979,1,c	;volatile
   673  001458  D004               	goto	l100
   674                           
   675                           ;mainzinha.c: 200: Delay10KTCYx (180);
   676  00145A  0EB4               	movlw	180
   677  00145C  EC0C  F00C         	call	_Delay10KTCYx
   678  001460  D006               	goto	l2855
   679  001462                     l100:
   680  001462  B683               	btfsc	3971,3,c	;volatile
   681  001464  A48B               	btfss	3979,2,c	;volatile
   682  001466  D005               	goto	l2857
   683                           
   684                           ;mainzinha.c: 203: Delay10KTCYx (180);
   685  001468  0EB4               	movlw	180
   686  00146A  EC0C  F00C         	call	_Delay10KTCYx
   687  00146E                     l2855:
   688                           
   689                           ;mainzinha.c: 204: acertos++;
   690  00146E  2A36               	incf	_acertos,f,c
   691                           
   692                           ;mainzinha.c: 205: }else{
   693  001470  D004               	goto	l2861
   694  001472                     l2857:
   695                           
   696                           ;mainzinha.c: 206: Delay10KTCYx (180);
   697  001472  0EB4               	movlw	180
   698  001474  EC0C  F00C         	call	_Delay10KTCYx
   699                           
   700                           ;mainzinha.c: 207: erros++;
   701  001478  2A35               	incf	_erros,f,c
   702  00147A                     l2861:
   703                           
   704                           ;mainzinha.c: 208: }
   705                           ;mainzinha.c: 209: if(temp>5){
   706  00147A  BE30               	btfsc	_temp+1,7,c
   707  00147C  D7E4               	goto	l2837
   708  00147E  5030               	movf	_temp+1,w,c
   709  001480  E104               	bnz	l2865
   710  001482  0E06               	movlw	6
   711  001484  5C2F               	subwf	_temp,w,c
   712  001486  A0D8               	btfss	status,0,c
   713  001488  D7DE               	goto	l2837
   714  00148A                     l2865:
   715                           
   716                           ;mainzinha.c: 211: }
   717                           ;mainzinha.c: 212: }
   718                           ;mainzinha.c: 214: flag_tela = 2;
   719  00148A  0E00               	movlw	0
   720  00148C  6E32               	movwf	_flag_tela+1,c
   721  00148E  0E02               	movlw	2
   722  001490  6E31               	movwf	_flag_tela,c
   723                           
   724                           ;mainzinha.c: 215: AtualizaTela(flag_tela);
   725  001492  5031               	movf	_flag_tela,w,c
   726  001494  EC66  F009         	call	_AtualizaTela
   727  001498  EF67  F000         	goto	start
   728  00149C                     __end_of_main:
   729                           	opt stack 0
   730                           tblptru	equ	0xFF8
   731                           intcon	equ	0xFF2
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           status	equ	0xFD8
   735                           
   736 ;; *************** function _init_XLCD *****************
   737 ;; Defined at:
   738 ;;		line 49 in file "mainzinha.c"
   739 ;; Parameters:    Size  Location     Type
   740 ;;		None
   741 ;; Auto vars:     Size  Location     Type
   742 ;;		None
   743 ;; Return value:  Size  Location     Type
   744 ;;                  1    wreg      void 
   745 ;; Registers used:
   746 ;;		wreg, status,2, status,0, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   752 ;;      Params:         0       0       0       0       0       0       0       0       0
   753 ;;      Locals:         0       0       0       0       0       0       0       0       0
   754 ;;      Temps:          0       0       0       0       0       0       0       0       0
   755 ;;      Totals:         0       0       0       0       0       0       0       0       0
   756 ;;Total ram usage:        0 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    6
   759 ;; This function calls:
   760 ;;		_BusyXLCD
   761 ;;		_OpenXLCD
   762 ;;		_WriteCmdXLCD
   763 ;; This function is called by:
   764 ;;		_main
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           	psect	text1
   769  0017C2                     __ptext1:
   770                           	opt stack 0
   771  0017C2                     _init_XLCD:
   772                           	opt stack 24
   773                           
   774                           ;mainzinha.c: 50: OpenXLCD(0b00101100&0b00111000);
   775                           
   776                           ;incstack = 0
   777  0017C2  0E28               	movlw	40
   778  0017C4  EC4E  F00A         	call	_OpenXLCD
   779  0017C8                     l1609:
   780  0017C8  EC89  F00B         	call	_BusyXLCD	;wreg free
   781  0017CC  0900               	iorlw	0
   782  0017CE  A4D8               	btfss	status,2,c
   783  0017D0  D7FB               	goto	l1609
   784                           
   785                           ;mainzinha.c: 52: WriteCmdXLCD(0X06);
   786  0017D2  0E06               	movlw	6
   787  0017D4  EC4B  F00B         	call	_WriteCmdXLCD
   788                           
   789                           ;mainzinha.c: 53: WriteCmdXLCD(0x0C);
   790  0017D8  0E0C               	movlw	12
   791  0017DA  EC4B  F00B         	call	_WriteCmdXLCD
   792  0017DE  0012               	return		;funcret
   793  0017E0                     __end_of_init_XLCD:
   794                           	opt stack 0
   795                           tblptru	equ	0xFF8
   796                           intcon	equ	0xFF2
   797                           postinc0	equ	0xFEE
   798                           wreg	equ	0xFE8
   799                           status	equ	0xFD8
   800                           
   801 ;; *************** function _OpenXLCD *****************
   802 ;; Defined at:
   803 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\openxlcd.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;  lcdtype         1    wreg     unsigned char 
   806 ;; Auto vars:     Size  Location     Type
   807 ;;  lcdtype         1   24[COMRAM] unsigned char 
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      void 
   810 ;; Registers used:
   811 ;;		wreg, status,2, status,0, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   817 ;;      Params:         0       0       0       0       0       0       0       0       0
   818 ;;      Locals:         1       0       0       0       0       0       0       0       0
   819 ;;      Temps:          0       0       0       0       0       0       0       0       0
   820 ;;      Totals:         1       0       0       0       0       0       0       0       0
   821 ;;Total ram usage:        1 bytes
   822 ;; Hardware stack levels used:    1
   823 ;; Hardware stack levels required when called:    5
   824 ;; This function calls:
   825 ;;		_BusyXLCD
   826 ;;		_Delay10KTCYx
   827 ;;		_DelayPORXLCD
   828 ;;		_SetDDRamAddr
   829 ;;		_WriteCmdXLCD
   830 ;; This function is called by:
   831 ;;		_init_XLCD
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835                           	psect	text2
   836  00149C                     __ptext2:
   837                           	opt stack 0
   838  00149C                     _OpenXLCD:
   839                           	opt stack 24
   840                           
   841                           ;incstack = 0
   842                           ;OpenXLCD@lcdtype stored from wreg
   843  00149C  6E19               	movwf	OpenXLCD@lcdtype,c
   844  00149E  0EF0               	movlw	240
   845  0014A0  1681               	andwf	3969,f,c	;volatile
   846  0014A2  0EF0               	movlw	240
   847  0014A4  1693               	andwf	3987,f,c	;volatile
   848  0014A6  9C93               	bcf	3987,6,c	;volatile
   849  0014A8  9A93               	bcf	3987,5,c	;volatile
   850  0014AA  9893               	bcf	3987,4,c	;volatile
   851  0014AC  9C8A               	bcf	3978,6,c	;volatile
   852  0014AE  9A8A               	bcf	3978,5,c	;volatile
   853  0014B0  988A               	bcf	3978,4,c	;volatile
   854  0014B2  EC2E  F00C         	call	_DelayPORXLCD	;wreg free
   855  0014B6  0E30               	movlw	48
   856  0014B8  EC4B  F00B         	call	_WriteCmdXLCD
   857  0014BC  0E05               	movlw	5
   858  0014BE  EC0C  F00C         	call	_Delay10KTCYx
   859  0014C2  0E30               	movlw	48
   860  0014C4  EC4B  F00B         	call	_WriteCmdXLCD
   861  0014C8  0E01               	movlw	1
   862  0014CA  EC0C  F00C         	call	_Delay10KTCYx
   863  0014CE  0E32               	movlw	50
   864  0014D0  EC4B  F00B         	call	_WriteCmdXLCD
   865  0014D4                     l1205:
   866  0014D4  EC89  F00B         	call	_BusyXLCD	;wreg free
   867  0014D8  0900               	iorlw	0
   868  0014DA  A4D8               	btfss	status,2,c
   869  0014DC  D7FB               	goto	l1205
   870  0014DE                     l1207:
   871  0014DE  EC89  F00B         	call	_BusyXLCD	;wreg free
   872  0014E2  0900               	iorlw	0
   873  0014E4  A4D8               	btfss	status,2,c
   874  0014E6  D7FB               	goto	l1207
   875  0014E8  5019               	movf	OpenXLCD@lcdtype,w,c
   876  0014EA  EC4B  F00B         	call	_WriteCmdXLCD
   877  0014EE                     l1211:
   878  0014EE  EC89  F00B         	call	_BusyXLCD	;wreg free
   879  0014F2  0900               	iorlw	0
   880  0014F4  A4D8               	btfss	status,2,c
   881  0014F6  D7FB               	goto	l1211
   882  0014F8  0E08               	movlw	8
   883  0014FA  EC4B  F00B         	call	_WriteCmdXLCD
   884  0014FE                     l1215:
   885  0014FE  EC89  F00B         	call	_BusyXLCD	;wreg free
   886  001502  0900               	iorlw	0
   887  001504  A4D8               	btfss	status,2,c
   888  001506  D7FB               	goto	l1215
   889  001508  0E0F               	movlw	15
   890  00150A  EC4B  F00B         	call	_WriteCmdXLCD
   891  00150E                     l1219:
   892  00150E  EC89  F00B         	call	_BusyXLCD	;wreg free
   893  001512  0900               	iorlw	0
   894  001514  A4D8               	btfss	status,2,c
   895  001516  D7FB               	goto	l1219
   896  001518  0E01               	movlw	1
   897  00151A  EC4B  F00B         	call	_WriteCmdXLCD
   898  00151E                     l1223:
   899  00151E  EC89  F00B         	call	_BusyXLCD	;wreg free
   900  001522  0900               	iorlw	0
   901  001524  A4D8               	btfss	status,2,c
   902  001526  D7FB               	goto	l1223
   903  001528  0E04               	movlw	4
   904  00152A  EC4B  F00B         	call	_WriteCmdXLCD
   905  00152E                     l1227:
   906  00152E  EC89  F00B         	call	_BusyXLCD	;wreg free
   907  001532  0900               	iorlw	0
   908  001534  A4D8               	btfss	status,2,c
   909  001536  D7FB               	goto	l1227
   910  001538  0E80               	movlw	128
   911  00153A  EC01  F00B         	call	_SetDDRamAddr
   912  00153E  0012               	return	
   913  001540                     __end_of_OpenXLCD:
   914                           	opt stack 0
   915                           tblptru	equ	0xFF8
   916                           intcon	equ	0xFF2
   917                           postinc0	equ	0xFEE
   918                           wreg	equ	0xFE8
   919                           status	equ	0xFD8
   920                           
   921 ;; *************** function _WriteCmdXLCD *****************
   922 ;; Defined at:
   923 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\wcmdxlcd.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;  cmd             1    wreg     unsigned char 
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  cmd             1   20[COMRAM] unsigned char 
   928 ;; Return value:  Size  Location     Type
   929 ;;                  1    wreg      void 
   930 ;; Registers used:
   931 ;;		wreg, status,2, status,0, cstack
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   937 ;;      Params:         0       0       0       0       0       0       0       0       0
   938 ;;      Locals:         1       0       0       0       0       0       0       0       0
   939 ;;      Temps:          0       0       0       0       0       0       0       0       0
   940 ;;      Totals:         1       0       0       0       0       0       0       0       0
   941 ;;Total ram usage:        1 bytes
   942 ;; Hardware stack levels used:    1
   943 ;; Hardware stack levels required when called:    4
   944 ;; This function calls:
   945 ;;		_DelayFor18TCY
   946 ;; This function is called by:
   947 ;;		_init_XLCD
   948 ;;		_OpenXLCD
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           	psect	text3
   953  001696                     __ptext3:
   954                           	opt stack 0
   955  001696                     _WriteCmdXLCD:
   956                           	opt stack 25
   957                           
   958                           ;incstack = 0
   959                           ;WriteCmdXLCD@cmd stored from wreg
   960  001696  6E15               	movwf	WriteCmdXLCD@cmd,c
   961  001698  0EF0               	movlw	240
   962  00169A  1693               	andwf	3987,f,c	;volatile
   963  00169C  0EF0               	movlw	240
   964  00169E  1681               	andwf	3969,f,c	;volatile
   965  0016A0  3815               	swapf	WriteCmdXLCD@cmd,w,c
   966  0016A2  0B0F               	andlw	15
   967  0016A4  0B0F               	andlw	15
   968  0016A6  1281               	iorwf	3969,f,c	;volatile
   969  0016A8  9C8A               	bcf	3978,6,c	;volatile
   970  0016AA  9A8A               	bcf	3978,5,c	;volatile
   971  0016AC  EC32  F00C         	call	_DelayFor18TCY	;wreg free
   972  0016B0  888A               	bsf	3978,4,c	;volatile
   973  0016B2  EC32  F00C         	call	_DelayFor18TCY	;wreg free
   974  0016B6  988A               	bcf	3978,4,c	;volatile
   975  0016B8  0EF0               	movlw	240
   976  0016BA  1681               	andwf	3969,f,c	;volatile
   977  0016BC  5015               	movf	WriteCmdXLCD@cmd,w,c
   978  0016BE  0B0F               	andlw	15
   979  0016C0  1281               	iorwf	3969,f,c	;volatile
   980  0016C2  EC32  F00C         	call	_DelayFor18TCY	;wreg free
   981  0016C6  888A               	bsf	3978,4,c	;volatile
   982  0016C8  EC32  F00C         	call	_DelayFor18TCY	;wreg free
   983  0016CC  988A               	bcf	3978,4,c	;volatile
   984  0016CE  0E0F               	movlw	15
   985  0016D0  1293               	iorwf	3987,f,c	;volatile
   986  0016D2  0012               	return	
   987  0016D4                     __end_of_WriteCmdXLCD:
   988                           	opt stack 0
   989                           tblptru	equ	0xFF8
   990                           intcon	equ	0xFF2
   991                           postinc0	equ	0xFEE
   992                           wreg	equ	0xFE8
   993                           status	equ	0xFD8
   994                           
   995 ;; *************** function _DelayPORXLCD *****************
   996 ;; Defined at:
   997 ;;		line 152 in file "mainzinha.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;		None
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;		None
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  1    wreg      void 
  1004 ;; Registers used:
  1005 ;;		wreg, cstack
  1006 ;; Tracked objects:
  1007 ;;		On entry : 0/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1011 ;;      Params:         0       0       0       0       0       0       0       0       0
  1012 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1013 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1014 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1015 ;;Total ram usage:        0 bytes
  1016 ;; Hardware stack levels used:    1
  1017 ;; Hardware stack levels required when called:    3
  1018 ;; This function calls:
  1019 ;;		_Delay1KTCYx
  1020 ;; This function is called by:
  1021 ;;		_OpenXLCD
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           	psect	text4
  1026  00185C                     __ptext4:
  1027                           	opt stack 0
  1028  00185C                     _DelayPORXLCD:
  1029                           	opt stack 25
  1030                           
  1031                           ;mainzinha.c: 153: Delay1KTCYx(180);
  1032                           
  1033                           ;incstack = 0
  1034  00185C  0EB4               	movlw	180
  1035  00185E  EC17  F00C         	call	_Delay1KTCYx
  1036  001862  0012               	return	
  1037  001864                     __end_of_DelayPORXLCD:
  1038                           	opt stack 0
  1039                           tblptru	equ	0xFF8
  1040                           intcon	equ	0xFF2
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           status	equ	0xFD8
  1044                           
  1045 ;; *************** function _Delay1KTCYx *****************
  1046 ;; Defined at:
  1047 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d1ktcyx.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;  unit            1    wreg     unsigned char 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  unit            1   19[COMRAM] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1061 ;;      Params:         0       0       0       0       0       0       0       0       0
  1062 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1064 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1065 ;;Total ram usage:        1 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; Hardware stack levels required when called:    2
  1068 ;; This function calls:
  1069 ;;		Nothing
  1070 ;; This function is called by:
  1071 ;;		_DelayPORXLCD
  1072 ;;		_DelayXLCD
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076                           	psect	text5
  1077  00182E                     __ptext5:
  1078                           	opt stack 0
  1079  00182E                     _Delay1KTCYx:
  1080                           	opt stack 25
  1081                           
  1082                           ;incstack = 0
  1083                           ;Delay1KTCYx@unit stored from wreg
  1084  00182E  6E14               	movwf	Delay1KTCYx@unit,c
  1085  001830  0EC8               	movlw	200
  1086  001832                     u2607:
  1087  001832  D000               	nop2	
  1088  001834  2EE8               	decfsz	wreg,f,c
  1089  001836  D7FD               	bra	u2607
  1090  001838  2E14               	decfsz	Delay1KTCYx@unit,f,c
  1091  00183A  D7FA               	goto	l1003
  1092  00183C  0012               	return	
  1093  00183E                     __end_of_Delay1KTCYx:
  1094                           	opt stack 0
  1095                           tblptru	equ	0xFF8
  1096                           intcon	equ	0xFF2
  1097                           postinc0	equ	0xFEE
  1098                           wreg	equ	0xFE8
  1099                           status	equ	0xFD8
  1100                           
  1101 ;; *************** function _Delay10KTCYx *****************
  1102 ;; Defined at:
  1103 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10ktcyx.c"
  1104 ;; Parameters:    Size  Location     Type
  1105 ;;  unit            1    wreg     unsigned char 
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;  unit            1   20[COMRAM] unsigned char 
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  1    wreg      void 
  1110 ;; Registers used:
  1111 ;;		wreg
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1117 ;;      Params:         0       0       0       0       0       0       0       0       0
  1118 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1119 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1120 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1121 ;;Total ram usage:        2 bytes
  1122 ;; Hardware stack levels used:    1
  1123 ;; Hardware stack levels required when called:    2
  1124 ;; This function calls:
  1125 ;;		Nothing
  1126 ;; This function is called by:
  1127 ;;		_main
  1128 ;;		_OpenXLCD
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           	psect	text6
  1133  001818                     __ptext6:
  1134                           	opt stack 0
  1135  001818                     _Delay10KTCYx:
  1136                           	opt stack 26
  1137                           
  1138                           ;incstack = 0
  1139                           ;Delay10KTCYx@unit stored from wreg
  1140  001818  6E15               	movwf	Delay10KTCYx@unit,c
  1141  00181A  0E0D               	movlw	13
  1142  00181C  6E14               	movwf	??_Delay10KTCYx& (0+255),c
  1143  00181E  0EFC               	movlw	252
  1144  001820                     u2617:
  1145  001820  2EE8               	decfsz	wreg,f,c
  1146  001822  D7FE               	bra	u2617
  1147  001824  2E14               	decfsz	??_Delay10KTCYx& (0+255),f,c
  1148  001826  D7FC               	bra	u2617
  1149  001828  2E15               	decfsz	Delay10KTCYx@unit,f,c
  1150  00182A  D7F7               	goto	l1095
  1151  00182C  0012               	return	
  1152  00182E                     __end_of_Delay10KTCYx:
  1153                           	opt stack 0
  1154                           tblptru	equ	0xFF8
  1155                           intcon	equ	0xFF2
  1156                           postinc0	equ	0xFEE
  1157                           wreg	equ	0xFE8
  1158                           status	equ	0xFD8
  1159                           
  1160 ;; *************** function _init *****************
  1161 ;; Defined at:
  1162 ;;		line 40 in file "mainzinha.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;		None
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;		None
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      void 
  1169 ;; Registers used:
  1170 ;;		None
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1176 ;;      Params:         0       0       0       0       0       0       0       0       0
  1177 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1179 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1180 ;;Total ram usage:        0 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    2
  1183 ;; This function calls:
  1184 ;;		Nothing
  1185 ;; This function is called by:
  1186 ;;		_main
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190                           	psect	text7
  1191  00184E                     __ptext7:
  1192                           	opt stack 0
  1193  00184E                     _init:
  1194                           	opt stack 28
  1195                           
  1196                           ;mainzinha.c: 41: TRISCbits.TRISC0 = 0;
  1197                           
  1198                           ;incstack = 0
  1199  00184E  9094               	bcf	3988,0,c	;volatile
  1200                           
  1201                           ;mainzinha.c: 42: LATCbits.LATC0 = 0;
  1202  001850  908B               	bcf	3979,0,c	;volatile
  1203                           
  1204                           ;mainzinha.c: 43: TRISCbits.TRISC1 = 0;
  1205  001852  9294               	bcf	3988,1,c	;volatile
  1206                           
  1207                           ;mainzinha.c: 44: LATCbits.LATC1 = 0;
  1208  001854  928B               	bcf	3979,1,c	;volatile
  1209                           
  1210                           ;mainzinha.c: 45: TRISCbits.TRISC2 = 0;
  1211  001856  9494               	bcf	3988,2,c	;volatile
  1212                           
  1213                           ;mainzinha.c: 46: LATCbits.LATC2 = 0;
  1214  001858  948B               	bcf	3979,2,c	;volatile
  1215  00185A  0012               	return		;funcret
  1216  00185C                     __end_of_init:
  1217                           	opt stack 0
  1218                           tblptru	equ	0xFF8
  1219                           intcon	equ	0xFF2
  1220                           postinc0	equ	0xFEE
  1221                           wreg	equ	0xFE8
  1222                           status	equ	0xFD8
  1223                           
  1224 ;; *************** function _config_inicial *****************
  1225 ;; Defined at:
  1226 ;;		line 56 in file "mainzinha.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;		None
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;		None
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, status,2
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1240 ;;      Params:         0       0       0       0       0       0       0       0       0
  1241 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1242 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1243 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1244 ;;Total ram usage:        0 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; Hardware stack levels required when called:    2
  1247 ;; This function calls:
  1248 ;;		Nothing
  1249 ;; This function is called by:
  1250 ;;		_main
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text8
  1255  0017A0                     __ptext8:
  1256                           	opt stack 0
  1257  0017A0                     _config_inicial:
  1258                           	opt stack 28
  1259                           
  1260                           ;mainzinha.c: 57: T0CONbits.TMR0ON =0;
  1261                           
  1262                           ;incstack = 0
  1263  0017A0  9ED5               	bcf	4053,7,c	;volatile
  1264                           
  1265                           ;mainzinha.c: 59: INTCONbits.TMR0IE = 1;
  1266  0017A2  8AF2               	bsf	intcon,5,c	;volatile
  1267                           
  1268                           ;mainzinha.c: 60: INTCONbits.TMR0IF = 0;
  1269  0017A4  94F2               	bcf	intcon,2,c	;volatile
  1270                           
  1271                           ;mainzinha.c: 62: T0CONbits.T08BIT= 0;
  1272  0017A6  9CD5               	bcf	4053,6,c	;volatile
  1273                           
  1274                           ;mainzinha.c: 64: T0CONbits.PSA = 0;
  1275  0017A8  96D5               	bcf	4053,3,c	;volatile
  1276                           
  1277                           ;mainzinha.c: 65: T0CONbits.T0PS0 = 0;
  1278  0017AA  90D5               	bcf	4053,0,c	;volatile
  1279                           
  1280                           ;mainzinha.c: 66: T0CONbits.T0PS1 = 1;
  1281  0017AC  82D5               	bsf	4053,1,c	;volatile
  1282                           
  1283                           ;mainzinha.c: 67: T0CONbits.T0PS2 =1;
  1284  0017AE  84D5               	bsf	4053,2,c	;volatile
  1285                           
  1286                           ;mainzinha.c: 68: T0CONbits.T0CS =0;
  1287  0017B0  9AD5               	bcf	4053,5,c	;volatile
  1288                           
  1289                           ;mainzinha.c: 70: TMR0 = 0;
  1290  0017B2  0E00               	movlw	0
  1291  0017B4  6ED7               	movwf	4055,c	;volatile
  1292  0017B6  0E00               	movlw	0
  1293  0017B8  6ED6               	movwf	4054,c	;volatile
  1294                           
  1295                           ;mainzinha.c: 72: T0CONbits.TMR0ON =1;
  1296  0017BA  8ED5               	bsf	4053,7,c	;volatile
  1297                           
  1298                           ;mainzinha.c: 74: INTCONbits.GIEH =1;
  1299  0017BC  8EF2               	bsf	intcon,7,c	;volatile
  1300                           
  1301                           ;mainzinha.c: 75: INTCONbits.GIEL =1;
  1302  0017BE  8CF2               	bsf	intcon,6,c	;volatile
  1303  0017C0  0012               	return		;funcret
  1304  0017C2                     __end_of_config_inicial:
  1305                           	opt stack 0
  1306                           tblptru	equ	0xFF8
  1307                           intcon	equ	0xFF2
  1308                           postinc0	equ	0xFEE
  1309                           wreg	equ	0xFE8
  1310                           status	equ	0xFD8
  1311                           
  1312 ;; *************** function _AtualizaTela *****************
  1313 ;; Defined at:
  1314 ;;		line 117 in file "mainzinha.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;  flag_tela       1    wreg     unsigned char 
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;  flag_tela       1   45[COMRAM] unsigned char 
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      void 
  1321 ;; Registers used:
  1322 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1328 ;;      Params:         0       0       0       0       0       0       0       0       0
  1329 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1330 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1331 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1332 ;;Total ram usage:        1 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; Hardware stack levels required when called:    6
  1335 ;; This function calls:
  1336 ;;		_SetDDRamAddr
  1337 ;;		_putrsXLCD
  1338 ;;		_sprintf
  1339 ;; This function is called by:
  1340 ;;		_main
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           	psect	text9
  1345  0012CC                     __ptext9:
  1346                           	opt stack 0
  1347  0012CC                     _AtualizaTela:
  1348                           	opt stack 24
  1349                           
  1350                           ;incstack = 0
  1351                           ;AtualizaTela@flag_tela stored from wreg
  1352  0012CC  6E2E               	movwf	AtualizaTela@flag_tela,c
  1353                           
  1354                           ;mainzinha.c: 118: switch(flag_tela){
  1355  0012CE  D07F               	goto	l2789
  1356  0012D0                     l2757:
  1357                           
  1358                           ;mainzinha.c: 120: SetDDRamAddr(0x00);
  1359  0012D0  0E00               	movlw	0
  1360  0012D2  EC01  F00B         	call	_SetDDRamAddr
  1361                           
  1362                           ;mainzinha.c: 121: sprintf(tela," SEMAPHORE TEST ");
  1363  0012D6  0E37               	movlw	low _tela
  1364  0012D8  6E20               	movwf	sprintf@sp,c
  1365  0012DA  0E00               	movlw	high _tela
  1366  0012DC  6E21               	movwf	sprintf@sp+1,c
  1367  0012DE  0E89               	movlw	low STR_1
  1368  0012E0  6E22               	movwf	sprintf@f,c
  1369  0012E2  0E08               	movlw	high STR_1
  1370  0012E4  6E23               	movwf	sprintf@f+1,c
  1371  0012E6  EC5D  F004         	call	_sprintf	;wreg free
  1372                           
  1373                           ;mainzinha.c: 122: putrsXLCD(tela);
  1374  0012EA  0E37               	movlw	low _tela
  1375  0012EC  6E16               	movwf	putrsXLCD@buffer,c
  1376  0012EE  0E00               	movlw	high _tela
  1377  0012F0  6E17               	movwf	putrsXLCD@buffer+1,c
  1378  0012F2  ECA6  F00B         	call	_putrsXLCD	;wreg free
  1379                           
  1380                           ;mainzinha.c: 123: SetDDRamAddr(0x40);
  1381  0012F6  0E40               	movlw	64
  1382  0012F8  EC01  F00B         	call	_SetDDRamAddr
  1383                           
  1384                           ;mainzinha.c: 124: sprintf(tela,"-- Press Start --");
  1385  0012FC  0E37               	movlw	low _tela
  1386  0012FE  6E20               	movwf	sprintf@sp,c
  1387  001300  0E00               	movlw	high _tela
  1388  001302  6E21               	movwf	sprintf@sp+1,c
  1389  001304  0E55               	movlw	low STR_2
  1390  001306  6E22               	movwf	sprintf@f,c
  1391  001308  0E08               	movlw	high STR_2
  1392  00130A  6E23               	movwf	sprintf@f+1,c
  1393  00130C  EC5D  F004         	call	_sprintf	;wreg free
  1394                           
  1395                           ;mainzinha.c: 125: putrsXLCD(tela);
  1396  001310  0E37               	movlw	low _tela
  1397  001312  6E16               	movwf	putrsXLCD@buffer,c
  1398  001314  0E00               	movlw	high _tela
  1399  001316  6E17               	movwf	putrsXLCD@buffer+1,c
  1400  001318  ECA6  F00B         	call	_putrsXLCD	;wreg free
  1401                           
  1402                           ;mainzinha.c: 126: break;
  1403  00131C  0012               	return	
  1404  00131E                     l2767:
  1405                           
  1406                           ;mainzinha.c: 128: SetDDRamAddr(0x00);
  1407  00131E  0E00               	movlw	0
  1408  001320  EC01  F00B         	call	_SetDDRamAddr
  1409                           
  1410                           ;mainzinha.c: 129: sprintf(tela," --- In test --- ");
  1411  001324  0E37               	movlw	low _tela
  1412  001326  6E20               	movwf	sprintf@sp,c
  1413  001328  0E00               	movlw	high _tela
  1414  00132A  6E21               	movwf	sprintf@sp+1,c
  1415  00132C  0E43               	movlw	low STR_3
  1416  00132E  6E22               	movwf	sprintf@f,c
  1417  001330  0E08               	movlw	high STR_3
  1418  001332  6E23               	movwf	sprintf@f+1,c
  1419  001334  EC5D  F004         	call	_sprintf	;wreg free
  1420                           
  1421                           ;mainzinha.c: 130: putrsXLCD(tela);
  1422  001338  0E37               	movlw	low _tela
  1423  00133A  6E16               	movwf	putrsXLCD@buffer,c
  1424  00133C  0E00               	movlw	high _tela
  1425  00133E  6E17               	movwf	putrsXLCD@buffer+1,c
  1426  001340  ECA6  F00B         	call	_putrsXLCD	;wreg free
  1427                           
  1428                           ;mainzinha.c: 131: SetDDRamAddr(0x40);
  1429  001344  0E40               	movlw	64
  1430  001346  EC01  F00B         	call	_SetDDRamAddr
  1431                           
  1432                           ;mainzinha.c: 132: sprintf(tela,"       ***       ");
  1433  00134A  0E37               	movlw	low _tela
  1434  00134C  6E20               	movwf	sprintf@sp,c
  1435  00134E  0E00               	movlw	high _tela
  1436  001350  6E21               	movwf	sprintf@sp+1,c
  1437  001352  0E1F               	movlw	low STR_4
  1438  001354  6E22               	movwf	sprintf@f,c
  1439  001356  0E08               	movlw	high STR_4
  1440  001358  6E23               	movwf	sprintf@f+1,c
  1441  00135A  EC5D  F004         	call	_sprintf	;wreg free
  1442                           
  1443                           ;mainzinha.c: 133: putrsXLCD(tela);
  1444  00135E  0E37               	movlw	low _tela
  1445  001360  6E16               	movwf	putrsXLCD@buffer,c
  1446  001362  0E00               	movlw	high _tela
  1447  001364  6E17               	movwf	putrsXLCD@buffer+1,c
  1448  001366  ECA6  F00B         	call	_putrsXLCD	;wreg free
  1449                           
  1450                           ;mainzinha.c: 134: break;
  1451  00136A  0012               	return	
  1452  00136C                     l2777:
  1453                           
  1454                           ;mainzinha.c: 136: SetDDRamAddr(0x00);
  1455  00136C  0E00               	movlw	0
  1456  00136E  EC01  F00B         	call	_SetDDRamAddr
  1457                           
  1458                           ;mainzinha.c: 137: sprintf(tela,"  --- SCORE ---  ");
  1459  001372  0E37               	movlw	low _tela
  1460  001374  6E20               	movwf	sprintf@sp,c
  1461  001376  0E00               	movlw	high _tela
  1462  001378  6E21               	movwf	sprintf@sp+1,c
  1463  00137A  0E31               	movlw	low STR_5
  1464  00137C  6E22               	movwf	sprintf@f,c
  1465  00137E  0E08               	movlw	high STR_5
  1466  001380  6E23               	movwf	sprintf@f+1,c
  1467  001382  EC5D  F004         	call	_sprintf	;wreg free
  1468                           
  1469                           ;mainzinha.c: 138: putrsXLCD(tela);
  1470  001386  0E37               	movlw	low _tela
  1471  001388  6E16               	movwf	putrsXLCD@buffer,c
  1472  00138A  0E00               	movlw	high _tela
  1473  00138C  6E17               	movwf	putrsXLCD@buffer+1,c
  1474  00138E  ECA6  F00B         	call	_putrsXLCD	;wreg free
  1475                           
  1476                           ;mainzinha.c: 139: SetDDRamAddr(0x40);
  1477  001392  0E40               	movlw	64
  1478  001394  EC01  F00B         	call	_SetDDRamAddr
  1479                           
  1480                           ;mainzinha.c: 140: sprintf(tela,"Acerts:%d ",acertos, " Errors:%d ", erros);
  1481  001398  0E37               	movlw	low _tela
  1482  00139A  6E20               	movwf	sprintf@sp,c
  1483  00139C  0E00               	movlw	high _tela
  1484  00139E  6E21               	movwf	sprintf@sp+1,c
  1485  0013A0  0EA6               	movlw	low STR_6
  1486  0013A2  6E22               	movwf	sprintf@f,c
  1487  0013A4  0E08               	movlw	high STR_6
  1488  0013A6  6E23               	movwf	sprintf@f+1,c
  1489  0013A8  C036  F024         	movff	_acertos,?_sprintf+4
  1490  0013AC  6A25               	clrf	?_sprintf+5,c
  1491  0013AE  0E9A               	movlw	low STR_7
  1492  0013B0  6E26               	movwf	?_sprintf+6,c
  1493  0013B2  0E08               	movlw	high STR_7
  1494  0013B4  6E27               	movwf	?_sprintf+7,c
  1495  0013B6  C035  F028         	movff	_erros,?_sprintf+8
  1496  0013BA  6A29               	clrf	?_sprintf+9,c
  1497  0013BC  EC5D  F004         	call	_sprintf	;wreg free
  1498                           
  1499                           ;mainzinha.c: 141: putrsXLCD(tela);
  1500  0013C0  0E37               	movlw	low _tela
  1501  0013C2  6E16               	movwf	putrsXLCD@buffer,c
  1502  0013C4  0E00               	movlw	high _tela
  1503  0013C6  6E17               	movwf	putrsXLCD@buffer+1,c
  1504  0013C8  ECA6  F00B         	call	_putrsXLCD	;wreg free
  1505                           
  1506                           ;mainzinha.c: 145: }
  1507                           
  1508                           ;mainzinha.c: 144: break;
  1509                           
  1510                           ;mainzinha.c: 143: default:
  1511                           
  1512                           ;mainzinha.c: 142: break;
  1513  0013CC  0012               	return	
  1514  0013CE                     l2789:
  1515  0013CE  502E               	movf	AtualizaTela@flag_tela,w,c
  1516                           
  1517                           ; Switch size 1, requested type "space"
  1518                           ; Number of cases is 3, Range of values is 0 to 2
  1519                           ; switch strategies available:
  1520                           ; Name         Instructions Cycles
  1521                           ; simple_byte           10     6 (average)
  1522                           ;	Chosen strategy is simple_byte
  1523  0013D0  0A00               	xorlw	0	; case 0
  1524  0013D2  B4D8               	btfsc	status,2,c
  1525  0013D4  D77D               	goto	l2757
  1526  0013D6  0A01               	xorlw	1	; case 1
  1527  0013D8  B4D8               	btfsc	status,2,c
  1528  0013DA  D7A1               	goto	l2767
  1529  0013DC  0A03               	xorlw	3	; case 2
  1530  0013DE  A4D8               	btfss	status,2,c
  1531  0013E0  0012               	return	
  1532  0013E2  D7C4               	goto	l2777
  1533  0013E4                     __end_of_AtualizaTela:
  1534                           	opt stack 0
  1535                           tblptru	equ	0xFF8
  1536                           intcon	equ	0xFF2
  1537                           postinc0	equ	0xFEE
  1538                           wreg	equ	0xFE8
  1539                           status	equ	0xFD8
  1540                           
  1541 ;; *************** function _sprintf *****************
  1542 ;; Defined at:
  1543 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;  sp              2   31[COMRAM] PTR unsigned char 
  1546 ;;		 -> tela(16), 
  1547 ;;  f               2   33[COMRAM] PTR const unsigned char 
  1548 ;;		 -> STR_6(11), STR_5(18), STR_4(18), STR_3(18), 
  1549 ;;		 -> STR_2(18), STR_1(17), 
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;  idx             1    0[BANK0 ] unsigned char 
  1552 ;;  tmpval          4    0        struct .
  1553 ;;  flag            2   19[BANK0 ] unsigned short 
  1554 ;;  width           2   16[BANK0 ] int 
  1555 ;;  val             2   13[BANK0 ] unsigned int 
  1556 ;;  ap              2   11[BANK0 ] PTR void [1]
  1557 ;;		 -> ?_sprintf(2), 
  1558 ;;  len             2    9[BANK0 ] unsigned int 
  1559 ;;  cp              2    7[BANK0 ] PTR const unsigned char 
  1560 ;;		 -> STR_8(7), sprintf@c(1), STR_7(12), 
  1561 ;;  c               1   18[BANK0 ] char 
  1562 ;;  prec            1   15[BANK0 ] char 
  1563 ;; Return value:  Size  Location     Type
  1564 ;;                  2   31[COMRAM] int 
  1565 ;; Registers used:
  1566 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1572 ;;      Params:        10       0       0       0       0       0       0       0       0
  1573 ;;      Locals:         0      21       0       0       0       0       0       0       0
  1574 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1575 ;;      Totals:        14      21       0       0       0       0       0       0       0
  1576 ;;Total ram usage:       35 bytes
  1577 ;; Hardware stack levels used:    1
  1578 ;; Hardware stack levels required when called:    3
  1579 ;; This function calls:
  1580 ;;		___lwdiv
  1581 ;;		___lwmod
  1582 ;;		___wmul
  1583 ;;		_isdigit
  1584 ;; This function is called by:
  1585 ;;		_AtualizaTela
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           	psect	text10
  1590  0008BA                     __ptext10:
  1591                           	opt stack 0
  1592  0008BA                     _sprintf:
  1593                           	opt stack 26
  1594                           
  1595                           ;doprnt.c: 494: va_list ap;
  1596                           ;doprnt.c: 499: signed char c;
  1597                           ;doprnt.c: 501: int width;
  1598                           ;doprnt.c: 506: signed char prec;
  1599                           ;doprnt.c: 508: unsigned short flag;
  1600                           ;doprnt.c: 523: union {
  1601                           ;doprnt.c: 524: unsigned long vd;
  1602                           ;doprnt.c: 525: double integ;
  1603                           ;doprnt.c: 526: } tmpval;
  1604                           ;doprnt.c: 528: unsigned int val;
  1605                           ;doprnt.c: 529: unsigned len;
  1606                           ;doprnt.c: 530: const char * cp;
  1607                           ;doprnt.c: 533: *ap = __va_start();
  1608                           
  1609                           ;incstack = 0
  1610  0008BA  0E24               	movlw	low (?_sprintf+4)
  1611  0008BC  0100               	movlb	0	; () banked
  1612  0008BE  6F6B               	movwf	sprintf@ap& (0+255),b
  1613  0008C0  0E00               	movlw	high (?_sprintf+4)
  1614  0008C2  0100               	movlb	0	; () banked
  1615  0008C4  6F6C               	movwf	(sprintf@ap+1)& (0+255),b
  1616                           
  1617                           ;doprnt.c: 536: while(c = *f++) {
  1618  0008C6  EF51  F009         	goto	l2749
  1619  0008CA                     l2395:
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;doprnt.c: 538: if(c != '%')
  1623  0008CA  0E25               	movlw	37
  1624  0008CC  0100               	movlb	0	; () banked
  1625  0008CE  1972               	xorwf	sprintf@c& (0+255),w,b
  1626  0008D0  B4D8               	btfsc	status,2,c
  1627  0008D2  D00A               	goto	l2401
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;doprnt.c: 540: {
  1631                           ;doprnt.c: 541: ((*sp++ = (c)));
  1632  0008D4  C020  FFD9         	movff	sprintf@sp,fsr2l
  1633  0008D8  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  1634  0008DC  C072  FFDF         	movff	sprintf@c,indf2
  1635                           
  1636                           ; BSR set to: 0
  1637  0008E0  4A20               	infsnz	sprintf@sp,f,c
  1638  0008E2  2A21               	incf	sprintf@sp+1,f,c
  1639                           
  1640                           ;doprnt.c: 542: continue;
  1641  0008E4  EF51  F009         	goto	l2749
  1642  0008E8                     l2401:
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;doprnt.c: 543: }
  1646                           ;doprnt.c: 546: width = 0;
  1647  0008E8  0E00               	movlw	0
  1648  0008EA  0100               	movlb	0	; () banked
  1649  0008EC  6F71               	movwf	(sprintf@width+1)& (0+255),b
  1650  0008EE  0E00               	movlw	0
  1651  0008F0  6F70               	movwf	sprintf@width& (0+255),b
  1652                           
  1653                           ;doprnt.c: 548: flag = 0;
  1654  0008F2  0E00               	movlw	0
  1655  0008F4  0100               	movlb	0	; () banked
  1656  0008F6  6F74               	movwf	(sprintf@flag+1)& (0+255),b
  1657  0008F8  0E00               	movlw	0
  1658  0008FA  6F73               	movwf	sprintf@flag& (0+255),b
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;doprnt.c: 551: switch(*f) {
  1662                           
  1663                           ;doprnt.c: 550: for(;;) {
  1664  0008FC  D00D               	goto	l2413
  1665  0008FE                     l2403:
  1666                           
  1667                           ;doprnt.c: 554: flag |= 0x08;
  1668  0008FE  0100               	movlb	0	; () banked
  1669  000900  8773               	bsf	sprintf@flag& (0+255),3,b
  1670  000902  D008               	goto	L3
  1671  000904                     l2405:
  1672                           
  1673                           ;doprnt.c: 561: flag |= 0x01;
  1674  000904  0100               	movlb	0	; () banked
  1675  000906  8173               	bsf	sprintf@flag& (0+255),0,b
  1676  000908  D005               	goto	L3
  1677  00090A                     l2407:
  1678                           
  1679                           ;doprnt.c: 574: flag |= 0x800;
  1680  00090A  0100               	movlb	0	; () banked
  1681  00090C  8774               	bsf	(sprintf@flag+1)& (0+255),3,b
  1682  00090E  D002               	goto	L3
  1683  000910                     l2409:
  1684                           
  1685                           ;doprnt.c: 580: flag |= 0x04;
  1686  000910  0100               	movlb	0	; () banked
  1687  000912  8573               	bsf	sprintf@flag& (0+255),2,b
  1688  000914                     L3:
  1689                           
  1690                           ;doprnt.c: 581: f++;
  1691  000914  4A22               	infsnz	sprintf@f,f,c
  1692  000916  2A23               	incf	sprintf@f+1,f,c
  1693  000918                     l2413:
  1694  000918  C022  FFF6         	movff	sprintf@f,tblptrl
  1695  00091C  C023  FFF7         	movff	sprintf@f+1,tblptrh
  1696  000920                     	if	0	;tblptru may be non-zero
  1697  000920                     	endif
  1698  000920                     	if	0	;tblptru may be non-zero
  1699  000920                     	endif
  1700  000920  0008               	tblrd		*
  1701  000922  50F5               	movf	tablat,w,c
  1702                           
  1703                           ; Switch size 1, requested type "space"
  1704                           ; Number of cases is 4, Range of values is 32 to 48
  1705                           ; switch strategies available:
  1706                           ; Name         Instructions Cycles
  1707                           ; simple_byte           13     7 (average)
  1708                           ;	Chosen strategy is simple_byte
  1709  000924  0A20               	xorlw	32	; case 32
  1710  000926  B4D8               	btfsc	status,2,c
  1711  000928  D7ED               	goto	l2405
  1712  00092A  0A03               	xorlw	3	; case 35
  1713  00092C  B4D8               	btfsc	status,2,c
  1714  00092E  D7ED               	goto	l2407
  1715  000930  0A0E               	xorlw	14	; case 45
  1716  000932  B4D8               	btfsc	status,2,c
  1717  000934  D7E4               	goto	l2403
  1718  000936  0A1D               	xorlw	29	; case 48
  1719  000938  B4D8               	btfsc	status,2,c
  1720  00093A  D7EA               	goto	l2409
  1721                           
  1722                           ;doprnt.c: 593: if(flag & 0x08)
  1723                           
  1724                           ;doprnt.c: 586: }
  1725                           
  1726                           ;doprnt.c: 585: break;
  1727  00093C  0100               	movlb	0	; () banked
  1728  00093E  A773               	btfss	sprintf@flag& (0+255),3,b
  1729  000940  D002               	goto	l2417
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;doprnt.c: 594: flag &= ~0x04;
  1733  000942  0100               	movlb	0	; () banked
  1734  000944  9573               	bcf	sprintf@flag& (0+255),2,b
  1735  000946                     l2417:
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1739  000946  C022  FFF6         	movff	sprintf@f,tblptrl
  1740  00094A  C023  FFF7         	movff	sprintf@f+1,tblptrh
  1741  00094E                     	if	0	;tblptru may be non-zero
  1742  00094E                     	endif
  1743  00094E                     	if	0	;tblptru may be non-zero
  1744  00094E                     	endif
  1745  00094E  0008               	tblrd		*
  1746  000950  50F5               	movf	tablat,w,c
  1747  000952  ECF0  F00B         	call	_isdigit
  1748  000956  A0D8               	btfss	status,0,c
  1749  000958  D036               	goto	l2429
  1750                           
  1751                           ;doprnt.c: 598: width = 0;
  1752  00095A  0E00               	movlw	0
  1753  00095C  0100               	movlb	0	; () banked
  1754  00095E  6F71               	movwf	(sprintf@width+1)& (0+255),b
  1755  000960  0E00               	movlw	0
  1756  000962  6F70               	movwf	sprintf@width& (0+255),b
  1757  000964                     l2421:
  1758                           
  1759                           ;doprnt.c: 600: width *= 10;
  1760  000964  C070  F014         	movff	sprintf@width,___wmul@multiplier
  1761  000968  C071  F015         	movff	sprintf@width+1,___wmul@multiplier+1
  1762  00096C  0E00               	movlw	0
  1763  00096E  6E17               	movwf	___wmul@multiplicand+1,c
  1764  000970  0E0A               	movlw	10
  1765  000972  6E16               	movwf	___wmul@multiplicand,c
  1766  000974  ECBD  F00B         	call	___wmul	;wreg free
  1767  000978  C014  F070         	movff	?___wmul,sprintf@width
  1768  00097C  C015  F071         	movff	?___wmul+1,sprintf@width+1
  1769                           
  1770                           ;doprnt.c: 601: width += *f++ - '0';
  1771  000980  0ED0               	movlw	208
  1772  000982  6E2A               	movwf	??_sprintf& (0+255),c
  1773  000984  0EFF               	movlw	255
  1774  000986  6E2B               	movwf	(??_sprintf+1)& (0+255),c
  1775  000988  C022  FFF6         	movff	sprintf@f,tblptrl
  1776  00098C  C023  FFF7         	movff	sprintf@f+1,tblptrh
  1777  000990                     	if	0	;tblptru may be non-zero
  1778  000990                     	endif
  1779  000990                     	if	0	;tblptru may be non-zero
  1780  000990                     	endif
  1781  000990  0008               	tblrd		*
  1782  000992  50F5               	movf	tablat,w,c
  1783  000994  6E2C               	movwf	(??_sprintf+2)& (0+255),c
  1784  000996  6A2D               	clrf	(??_sprintf+3)& (0+255),c
  1785  000998  502A               	movf	??_sprintf,w,c
  1786  00099A  262C               	addwf	??_sprintf+2,f,c
  1787  00099C  502B               	movf	??_sprintf+1,w,c
  1788  00099E  222D               	addwfc	??_sprintf+3,f,c
  1789  0009A0  502C               	movf	??_sprintf+2,w,c
  1790  0009A2  0100               	movlb	0	; () banked
  1791  0009A4  2770               	addwf	sprintf@width& (0+255),f,b
  1792  0009A6  502D               	movf	??_sprintf+3,w,c
  1793  0009A8  0100               	movlb	0	; () banked
  1794  0009AA  2371               	addwfc	(sprintf@width+1)& (0+255),f,b
  1795                           
  1796                           ; BSR set to: 0
  1797  0009AC  4A22               	infsnz	sprintf@f,f,c
  1798  0009AE  2A23               	incf	sprintf@f+1,f,c
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1802  0009B0  C022  FFF6         	movff	sprintf@f,tblptrl
  1803  0009B4  C023  FFF7         	movff	sprintf@f+1,tblptrh
  1804  0009B8                     	if	0	;tblptru may be non-zero
  1805  0009B8                     	endif
  1806  0009B8                     	if	0	;tblptru may be non-zero
  1807  0009B8                     	endif
  1808  0009B8  0008               	tblrd		*
  1809  0009BA  50F5               	movf	tablat,w,c
  1810  0009BC  ECF0  F00B         	call	_isdigit
  1811  0009C0  A0D8               	btfss	status,0,c
  1812  0009C2  D019               	goto	l2437
  1813  0009C4  D7CF               	goto	l2421
  1814  0009C6                     l2429:
  1815  0009C6  C022  FFF6         	movff	sprintf@f,tblptrl
  1816  0009CA  C023  FFF7         	movff	sprintf@f+1,tblptrh
  1817  0009CE                     	if	0	;tblptru may be non-zero
  1818  0009CE                     	endif
  1819  0009CE                     	if	0	;tblptru may be non-zero
  1820  0009CE                     	endif
  1821  0009CE  0008               	tblrd		*
  1822  0009D0  50F5               	movf	tablat,w,c
  1823  0009D2  0A2A               	xorlw	42
  1824  0009D4  A4D8               	btfss	status,2,c
  1825  0009D6  D00F               	goto	l2437
  1826                           
  1827                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  1828  0009D8  C06B  FFD9         	movff	sprintf@ap,fsr2l
  1829  0009DC  C06C  FFDA         	movff	sprintf@ap+1,fsr2h
  1830  0009E0  CFDE F070          	movff	postinc2,sprintf@width
  1831  0009E4  CFDD F071          	movff	postdec2,sprintf@width+1
  1832  0009E8  0E02               	movlw	2
  1833  0009EA  0100               	movlb	0	; () banked
  1834  0009EC  276B               	addwf	sprintf@ap& (0+255),f,b
  1835  0009EE  0E00               	movlw	0
  1836  0009F0  236C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;doprnt.c: 606: f++;
  1840  0009F2  4A22               	infsnz	sprintf@f,f,c
  1841  0009F4  2A23               	incf	sprintf@f+1,f,c
  1842  0009F6                     l2437:
  1843                           
  1844                           ;doprnt.c: 608: }
  1845                           ;doprnt.c: 611: if(*f == '.') {
  1846  0009F6  C022  FFF6         	movff	sprintf@f,tblptrl
  1847  0009FA  C023  FFF7         	movff	sprintf@f+1,tblptrh
  1848  0009FE                     	if	0	;tblptru may be non-zero
  1849  0009FE                     	endif
  1850  0009FE                     	if	0	;tblptru may be non-zero
  1851  0009FE                     	endif
  1852  0009FE  0008               	tblrd		*
  1853  000A00  50F5               	movf	tablat,w,c
  1854  000A02  0A2E               	xorlw	46
  1855  000A04  A4D8               	btfss	status,2,c
  1856  000A06  D03C               	goto	l2457
  1857                           
  1858                           ;doprnt.c: 612: flag |= 0x4000;
  1859  000A08  0100               	movlb	0	; () banked
  1860  000A0A  8D74               	bsf	(sprintf@flag+1)& (0+255),6,b
  1861                           
  1862                           ;doprnt.c: 613: f++;
  1863  000A0C  4A22               	infsnz	sprintf@f,f,c
  1864  000A0E  2A23               	incf	sprintf@f+1,f,c
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;doprnt.c: 615: if(*f == '*') {
  1868  000A10  C022  FFF6         	movff	sprintf@f,tblptrl
  1869  000A14  C023  FFF7         	movff	sprintf@f+1,tblptrh
  1870  000A18                     	if	0	;tblptru may be non-zero
  1871  000A18                     	endif
  1872  000A18                     	if	0	;tblptru may be non-zero
  1873  000A18                     	endif
  1874  000A18  0008               	tblrd		*
  1875  000A1A  50F5               	movf	tablat,w,c
  1876  000A1C  0A2A               	xorlw	42
  1877  000A1E  A4D8               	btfss	status,2,c
  1878  000A20  D00F               	goto	l2449
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  1882  000A22  C06B  FFD9         	movff	sprintf@ap,fsr2l
  1883  000A26  C06C  FFDA         	movff	sprintf@ap+1,fsr2h
  1884  000A2A  50DF               	movf	indf2,w,c
  1885  000A2C  0100               	movlb	0	; () banked
  1886  000A2E  6F6F               	movwf	sprintf@prec& (0+255),b
  1887                           
  1888                           ; BSR set to: 0
  1889  000A30  0E02               	movlw	2
  1890  000A32  0100               	movlb	0	; () banked
  1891  000A34  276B               	addwf	sprintf@ap& (0+255),f,b
  1892  000A36  0E00               	movlw	0
  1893  000A38  236C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;doprnt.c: 617: f++;
  1897  000A3A  4A22               	infsnz	sprintf@f,f,c
  1898  000A3C  2A23               	incf	sprintf@f+1,f,c
  1899                           
  1900                           ;doprnt.c: 618: } else
  1901  000A3E  D10F               	goto	l2527
  1902  000A40                     l2449:
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;doprnt.c: 620: {
  1906                           ;doprnt.c: 621: prec = 0;
  1907  000A40  0E00               	movlw	0
  1908  000A42  0100               	movlb	0	; () banked
  1909  000A44  6F6F               	movwf	sprintf@prec& (0+255),b
  1910                           
  1911                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1912  000A46  D011               	goto	l2455
  1913  000A48                     l2451:
  1914                           
  1915                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1916  000A48  C022  FFF6         	movff	sprintf@f,tblptrl
  1917  000A4C  C023  FFF7         	movff	sprintf@f+1,tblptrh
  1918  000A50                     	if	0	;tblptru may be non-zero
  1919  000A50                     	endif
  1920  000A50                     	if	0	;tblptru may be non-zero
  1921  000A50                     	endif
  1922  000A50  0008               	tblrd		*
  1923  000A52  CFF5 F02A          	movff	tablat,??_sprintf
  1924  000A56  0100               	movlb	0	; () banked
  1925  000A58  516F               	movf	sprintf@prec& (0+255),w,b
  1926  000A5A  0D0A               	mullw	10
  1927  000A5C  50F3               	movf	prodl,w,c
  1928  000A5E  242A               	addwf	??_sprintf,w,c
  1929  000A60  0FD0               	addlw	208
  1930  000A62  0100               	movlb	0	; () banked
  1931  000A64  6F6F               	movwf	sprintf@prec& (0+255),b
  1932                           
  1933                           ; BSR set to: 0
  1934  000A66  4A22               	infsnz	sprintf@f,f,c
  1935  000A68  2A23               	incf	sprintf@f+1,f,c
  1936  000A6A                     l2455:
  1937                           
  1938                           ; BSR set to: 0
  1939  000A6A  C022  FFF6         	movff	sprintf@f,tblptrl
  1940  000A6E  C023  FFF7         	movff	sprintf@f+1,tblptrh
  1941  000A72                     	if	0	;tblptru may be non-zero
  1942  000A72                     	endif
  1943  000A72                     	if	0	;tblptru may be non-zero
  1944  000A72                     	endif
  1945  000A72  0008               	tblrd		*
  1946  000A74  50F5               	movf	tablat,w,c
  1947  000A76  ECF0  F00B         	call	_isdigit
  1948  000A7A  A0D8               	btfss	status,0,c
  1949  000A7C  D0F0               	goto	l2527
  1950  000A7E  D7E4               	goto	l2451
  1951  000A80                     l2457:
  1952                           
  1953                           ;doprnt.c: 626: prec = 0;
  1954  000A80  0E00               	movlw	0
  1955  000A82  0100               	movlb	0	; () banked
  1956  000A84  6F6F               	movwf	sprintf@prec& (0+255),b
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;doprnt.c: 630: }
  1960                           ;doprnt.c: 635: switch(c = *f++) {
  1961  000A86  D0EB               	goto	l2527
  1962  000A88                     l2459:
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;doprnt.c: 691: flag |= 0x40;
  1966  000A88  0100               	movlb	0	; () banked
  1967  000A8A  8D73               	bsf	sprintf@flag& (0+255),6,b
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;doprnt.c: 698: case 'i':
  1971                           ;doprnt.c: 699: break;
  1972                           
  1973                           ; BSR set to: 0
  1974                           
  1975                           ;doprnt.c: 697: case 'd':
  1976                           
  1977                           ;doprnt.c: 693: break;
  1978  000A8C  D112               	goto	l2529
  1979  000A8E                     l2461:
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;doprnt.c: 707: flag |= 0x2000;
  1983  000A8E  0100               	movlb	0	; () banked
  1984  000A90  8B74               	bsf	(sprintf@flag+1)& (0+255),5,b
  1985  000A92                     l155:
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;doprnt.c: 714: flag |= 0x20;
  1989  000A92  0100               	movlb	0	; () banked
  1990  000A94  8B73               	bsf	sprintf@flag& (0+255),5,b
  1991  000A96                     l156:
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;doprnt.c: 721: flag |= 0x80;
  1995  000A96  0100               	movlb	0	; () banked
  1996  000A98  8F73               	bsf	sprintf@flag& (0+255),7,b
  1997                           
  1998                           ;doprnt.c: 723: break;
  1999  000A9A  D10B               	goto	l2529
  2000  000A9C                     l2463:
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2004  000A9C  C06B  FFD9         	movff	sprintf@ap,fsr2l
  2005  000AA0  C06C  FFDA         	movff	sprintf@ap+1,fsr2h
  2006  000AA4  CFDE F067          	movff	postinc2,sprintf@cp
  2007  000AA8  CFDD F068          	movff	postdec2,sprintf@cp+1
  2008                           
  2009                           ; BSR set to: 0
  2010  000AAC  0E02               	movlw	2
  2011  000AAE  0100               	movlb	0	; () banked
  2012  000AB0  276B               	addwf	sprintf@ap& (0+255),f,b
  2013  000AB2  0E00               	movlw	0
  2014  000AB4  236C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;doprnt.c: 740: if(!cp)
  2018  000AB6  0100               	movlb	0	; () banked
  2019  000AB8  5167               	movf	sprintf@cp& (0+255),w,b
  2020  000ABA  0100               	movlb	0	; () banked
  2021  000ABC  1168               	iorwf	(sprintf@cp+1)& (0+255),w,b
  2022  000ABE  A4D8               	btfss	status,2,c
  2023  000AC0  D006               	goto	l2471
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;doprnt.c: 741: cp = "(null)";
  2027  000AC2  0EB1               	movlw	low STR_8
  2028  000AC4  0100               	movlb	0	; () banked
  2029  000AC6  6F67               	movwf	sprintf@cp& (0+255),b
  2030  000AC8  0E08               	movlw	high STR_8
  2031  000ACA  0100               	movlb	0	; () banked
  2032  000ACC  6F68               	movwf	(sprintf@cp+1)& (0+255),b
  2033  000ACE                     l2471:
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;doprnt.c: 745: len = 0;
  2037  000ACE  0E00               	movlw	0
  2038  000AD0  0100               	movlb	0	; () banked
  2039  000AD2  6F6A               	movwf	(sprintf@len+1)& (0+255),b
  2040  000AD4  0E00               	movlw	0
  2041  000AD6  6F69               	movwf	sprintf@len& (0+255),b
  2042                           
  2043                           ;doprnt.c: 746: while(cp[len])
  2044  000AD8  D003               	goto	l2475
  2045  000ADA                     l2473:
  2046                           
  2047                           ;doprnt.c: 747: len++;
  2048  000ADA  0100               	movlb	0	; () banked
  2049  000ADC  4B69               	infsnz	sprintf@len& (0+255),f,b
  2050  000ADE  2B6A               	incf	(sprintf@len+1)& (0+255),f,b
  2051  000AE0                     l2475:
  2052                           
  2053                           ; BSR set to: 0
  2054  000AE0  0100               	movlb	0	; () banked
  2055  000AE2  5169               	movf	sprintf@len& (0+255),w,b
  2056  000AE4  0100               	movlb	0	; () banked
  2057  000AE6  2567               	addwf	sprintf@cp& (0+255),w,b
  2058  000AE8  6E2A               	movwf	??_sprintf& (0+255),c
  2059  000AEA  0100               	movlb	0	; () banked
  2060  000AEC  516A               	movf	(sprintf@len+1)& (0+255),w,b
  2061  000AEE  0100               	movlb	0	; () banked
  2062  000AF0  2168               	addwfc	(sprintf@cp+1)& (0+255),w,b
  2063  000AF2  6E2B               	movwf	(??_sprintf+1)& (0+255),c
  2064  000AF4  C02A  FFF6         	movff	??_sprintf,tblptrl
  2065  000AF8  C02B  FFF7         	movff	??_sprintf+1,tblptrh
  2066  000AFC  6AF8               	clrf	tblptru,c
  2067  000AFE  0E07               	movlw	(high __ramtop+-1)
  2068  000B00  64F7               	cpfsgt	tblptrh,c
  2069  000B02  D003               	bra	u1967
  2070  000B04  0008               	tblrd		*
  2071  000B06  50F5               	movf	tablat,w,c
  2072  000B08  D005               	bra	u1960
  2073  000B0A                     u1967:
  2074  000B0A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2075  000B0E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2076  000B12  50EF               	movf	indf0,w,c
  2077  000B14                     u1960:
  2078  000B14  0900               	iorlw	0
  2079  000B16  A4D8               	btfss	status,2,c
  2080  000B18  D7E0               	goto	l2473
  2081  000B1A                     l2477:
  2082                           
  2083                           ;doprnt.c: 753: if(prec && prec < len)
  2084  000B1A  0100               	movlb	0	; () banked
  2085  000B1C  516F               	movf	sprintf@prec& (0+255),w,b
  2086  000B1E  0100               	movlb	0	; () banked
  2087  000B20  B4D8               	btfsc	status,2,c
  2088  000B22  D014               	goto	l2483
  2089                           
  2090                           ; BSR set to: 0
  2091  000B24  C06F  F02A         	movff	sprintf@prec,??_sprintf
  2092  000B28  6A2B               	clrf	(??_sprintf+1)& (0+255),c
  2093  000B2A  BE2A               	btfsc	??_sprintf& (0+255),7,c
  2094  000B2C  062B               	decf	(??_sprintf+1)& (0+255),f,c
  2095  000B2E  0100               	movlb	0	; () banked
  2096  000B30  5169               	movf	sprintf@len& (0+255),w,b
  2097  000B32  5C2A               	subwf	??_sprintf,w,c
  2098  000B34  0100               	movlb	0	; () banked
  2099  000B36  516A               	movf	(sprintf@len+1)& (0+255),w,b
  2100  000B38  582B               	subwfb	??_sprintf+1,w,c
  2101  000B3A  B0D8               	btfsc	status,0,c
  2102  000B3C  D007               	goto	l2483
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;doprnt.c: 754: len = prec;
  2106  000B3E  0100               	movlb	0	; () banked
  2107  000B40  516F               	movf	sprintf@prec& (0+255),w,b
  2108  000B42  0100               	movlb	0	; () banked
  2109  000B44  6F69               	movwf	sprintf@len& (0+255),b
  2110  000B46  6B6A               	clrf	(sprintf@len+1)& (0+255),b
  2111  000B48  BF69               	btfsc	sprintf@len& (0+255),7,b
  2112  000B4A  076A               	decf	(sprintf@len+1)& (0+255),f,b
  2113  000B4C                     l2483:
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;doprnt.c: 757: if(width > len)
  2117  000B4C  0100               	movlb	0	; () banked
  2118  000B4E  5170               	movf	sprintf@width& (0+255),w,b
  2119  000B50  0100               	movlb	0	; () banked
  2120  000B52  5D69               	subwf	sprintf@len& (0+255),w,b
  2121  000B54  0100               	movlb	0	; () banked
  2122  000B56  5171               	movf	(sprintf@width+1)& (0+255),w,b
  2123  000B58  0100               	movlb	0	; () banked
  2124  000B5A  596A               	subwfb	(sprintf@len+1)& (0+255),w,b
  2125  000B5C  B0D8               	btfsc	status,0,c
  2126  000B5E  D009               	goto	l2487
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;doprnt.c: 758: width -= len;
  2130  000B60  0100               	movlb	0	; () banked
  2131  000B62  5169               	movf	sprintf@len& (0+255),w,b
  2132  000B64  0100               	movlb	0	; () banked
  2133  000B66  5F70               	subwf	sprintf@width& (0+255),f,b
  2134  000B68  0100               	movlb	0	; () banked
  2135  000B6A  516A               	movf	(sprintf@len+1)& (0+255),w,b
  2136  000B6C  0100               	movlb	0	; () banked
  2137  000B6E  5B71               	subwfb	(sprintf@width+1)& (0+255),f,b
  2138  000B70  D005               	goto	l2489
  2139  000B72                     l2487:
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;doprnt.c: 759: else
  2143                           ;doprnt.c: 760: width = 0;
  2144  000B72  0E00               	movlw	0
  2145  000B74  0100               	movlb	0	; () banked
  2146  000B76  6F71               	movwf	(sprintf@width+1)& (0+255),b
  2147  000B78  0E00               	movlw	0
  2148  000B7A  6F70               	movwf	sprintf@width& (0+255),b
  2149  000B7C                     l2489:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;doprnt.c: 762: if(!(flag & 0x08))
  2153  000B7C  0100               	movlb	0	; () banked
  2154  000B7E  A773               	btfss	sprintf@flag& (0+255),3,b
  2155  000B80  D009               	goto	l2497
  2156  000B82  D02E               	goto	l2505
  2157  000B84                     l2493:
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;doprnt.c: 765: ((*sp++ = (' ')));
  2161  000B84  C020  FFD9         	movff	sprintf@sp,fsr2l
  2162  000B88  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  2163  000B8C  0E20               	movlw	32
  2164  000B8E  6EDF               	movwf	indf2,c
  2165                           
  2166                           ; BSR set to: 0
  2167  000B90  4A20               	infsnz	sprintf@sp,f,c
  2168  000B92  2A21               	incf	sprintf@sp+1,f,c
  2169  000B94                     l2497:
  2170                           
  2171                           ; BSR set to: 0
  2172  000B94  0100               	movlb	0	; () banked
  2173  000B96  0770               	decf	sprintf@width& (0+255),f,b
  2174  000B98  A0D8               	btfss	status,0,c
  2175  000B9A  0771               	decf	(sprintf@width+1)& (0+255),f,b
  2176  000B9C  0100               	movlb	0	; () banked
  2177  000B9E  2970               	incf	sprintf@width& (0+255),w,b
  2178  000BA0  E1F1               	bnz	l2493
  2179  000BA2  0100               	movlb	0	; () banked
  2180  000BA4  2971               	incf	(sprintf@width+1)& (0+255),w,b
  2181  000BA6  B4D8               	btfsc	status,2,c
  2182  000BA8  D01B               	goto	l2505
  2183  000BAA  D7EC               	goto	l2493
  2184  000BAC                     l2499:
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2188  000BAC  C067  FFF6         	movff	sprintf@cp,tblptrl
  2189  000BB0  C068  FFF7         	movff	sprintf@cp+1,tblptrh
  2190  000BB4  6AF8               	clrf	tblptru,c
  2191  000BB6  C020  FFD9         	movff	sprintf@sp,fsr2l
  2192  000BBA  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  2193  000BBE  0E07               	movlw	(high __ramtop+-1)
  2194  000BC0  64F7               	cpfsgt	tblptrh,c
  2195  000BC2  D003               	bra	u2037
  2196  000BC4  0008               	tblrd		*
  2197  000BC6  50F5               	movf	tablat,w,c
  2198  000BC8  D005               	bra	u2030
  2199  000BCA                     u2037:
  2200  000BCA  CFF6 FFE9          	movff	tblptrl,fsr0l
  2201  000BCE  CFF7 FFEA          	movff	tblptrh,fsr0h
  2202  000BD2  50EF               	movf	indf0,w,c
  2203  000BD4                     u2030:
  2204  000BD4  6EDF               	movwf	indf2,c
  2205  000BD6  0100               	movlb	0	; () banked
  2206  000BD8  4B67               	infsnz	sprintf@cp& (0+255),f,b
  2207  000BDA  2B68               	incf	(sprintf@cp+1)& (0+255),f,b
  2208                           
  2209                           ; BSR set to: 0
  2210  000BDC  4A20               	infsnz	sprintf@sp,f,c
  2211  000BDE  2A21               	incf	sprintf@sp+1,f,c
  2212  000BE0                     l2505:
  2213                           
  2214                           ; BSR set to: 0
  2215  000BE0  0100               	movlb	0	; () banked
  2216  000BE2  0769               	decf	sprintf@len& (0+255),f,b
  2217  000BE4  A0D8               	btfss	status,0,c
  2218  000BE6  076A               	decf	(sprintf@len+1)& (0+255),f,b
  2219  000BE8  0100               	movlb	0	; () banked
  2220  000BEA  2969               	incf	sprintf@len& (0+255),w,b
  2221  000BEC  E1DF               	bnz	l2499
  2222  000BEE  0100               	movlb	0	; () banked
  2223  000BF0  296A               	incf	(sprintf@len+1)& (0+255),w,b
  2224  000BF2  A4D8               	btfss	status,2,c
  2225  000BF4  D7DB               	goto	l2499
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;doprnt.c: 770: if(flag & 0x08)
  2229  000BF6  0100               	movlb	0	; () banked
  2230  000BF8  B773               	btfsc	sprintf@flag& (0+255),3,b
  2231  000BFA  D009               	goto	l2513
  2232  000BFC  D352               	goto	l2749
  2233  000BFE                     l2509:
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;doprnt.c: 772: ((*sp++ = (' ')));
  2237  000BFE  C020  FFD9         	movff	sprintf@sp,fsr2l
  2238  000C02  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  2239  000C06  0E20               	movlw	32
  2240  000C08  6EDF               	movwf	indf2,c
  2241                           
  2242                           ; BSR set to: 0
  2243  000C0A  4A20               	infsnz	sprintf@sp,f,c
  2244  000C0C  2A21               	incf	sprintf@sp+1,f,c
  2245  000C0E                     l2513:
  2246                           
  2247                           ; BSR set to: 0
  2248  000C0E  0100               	movlb	0	; () banked
  2249  000C10  0770               	decf	sprintf@width& (0+255),f,b
  2250  000C12  A0D8               	btfss	status,0,c
  2251  000C14  0771               	decf	(sprintf@width+1)& (0+255),f,b
  2252  000C16  0100               	movlb	0	; () banked
  2253  000C18  2970               	incf	sprintf@width& (0+255),w,b
  2254  000C1A  E1F1               	bnz	l2509
  2255  000C1C  0100               	movlb	0	; () banked
  2256  000C1E  2971               	incf	(sprintf@width+1)& (0+255),w,b
  2257  000C20  B4D8               	btfsc	status,2,c
  2258  000C22  D33F               	goto	l2749
  2259  000C24  D7EC               	goto	l2509
  2260  000C26                     l2515:
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2264  000C26  C06B  FFD9         	movff	sprintf@ap,fsr2l
  2265  000C2A  C06C  FFDA         	movff	sprintf@ap+1,fsr2h
  2266  000C2E  50DF               	movf	indf2,w,c
  2267  000C30  0100               	movlb	0	; () banked
  2268  000C32  6F72               	movwf	sprintf@c& (0+255),b
  2269                           
  2270                           ; BSR set to: 0
  2271  000C34  0E02               	movlw	2
  2272  000C36  0100               	movlb	0	; () banked
  2273  000C38  276B               	addwf	sprintf@ap& (0+255),f,b
  2274  000C3A  0E00               	movlw	0
  2275  000C3C  236C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2276  000C3E                     l2519:
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;doprnt.c: 805: cp = (char *)&c;
  2280  000C3E  0E72               	movlw	low sprintf@c
  2281  000C40  0100               	movlb	0	; () banked
  2282  000C42  6F67               	movwf	sprintf@cp& (0+255),b
  2283  000C44  0E00               	movlw	high sprintf@c
  2284  000C46  0100               	movlb	0	; () banked
  2285  000C48  6F68               	movwf	(sprintf@cp+1)& (0+255),b
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;doprnt.c: 806: len = 1;
  2289  000C4A  0E00               	movlw	0
  2290  000C4C  0100               	movlb	0	; () banked
  2291  000C4E  6F6A               	movwf	(sprintf@len+1)& (0+255),b
  2292  000C50  0E01               	movlw	1
  2293  000C52  6F69               	movwf	sprintf@len& (0+255),b
  2294                           
  2295                           ;doprnt.c: 807: goto dostring;
  2296  000C54  D762               	goto	l2477
  2297  000C56                     l2523:
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;doprnt.c: 818: flag |= 0xC0;
  2301  000C56  0EC0               	movlw	192
  2302  000C58  0100               	movlb	0	; () banked
  2303  000C5A  1373               	iorwf	sprintf@flag& (0+255),f,b
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;doprnt.c: 822: }
  2307                           
  2308                           ;doprnt.c: 819: break;
  2309  000C5C  D02A               	goto	l2529
  2310  000C5E                     l2527:
  2311  000C5E  C022  FFF6         	movff	sprintf@f,tblptrl
  2312  000C62  C023  FFF7         	movff	sprintf@f+1,tblptrh
  2313  000C66  4A22               	infsnz	sprintf@f,f,c
  2314  000C68  2A23               	incf	sprintf@f+1,f,c
  2315  000C6A                     	if	0	;tblptru may be non-zero
  2316  000C6A                     	endif
  2317  000C6A                     	if	0	;tblptru may be non-zero
  2318  000C6A                     	endif
  2319  000C6A  0008               	tblrd		*
  2320  000C6C  CFF5 F072          	movff	tablat,sprintf@c
  2321  000C70  0100               	movlb	0	; () banked
  2322  000C72  5172               	movf	sprintf@c& (0+255),w,b
  2323                           
  2324                           ; Switch size 1, requested type "space"
  2325                           ; Number of cases is 10, Range of values is 0 to 120
  2326                           ; switch strategies available:
  2327                           ; Name         Instructions Cycles
  2328                           ; simple_byte           31    16 (average)
  2329                           ;	Chosen strategy is simple_byte
  2330  000C74  0A00               	xorlw	0	; case 0
  2331  000C76  B4D8               	btfsc	status,2,c
  2332  000C78  D322               	goto	l2751
  2333  000C7A  0A58               	xorlw	88	; case 88
  2334  000C7C  B4D8               	btfsc	status,2,c
  2335  000C7E  D709               	goto	l155
  2336  000C80  0A3B               	xorlw	59	; case 99
  2337  000C82  B4D8               	btfsc	status,2,c
  2338  000C84  D7D0               	goto	l2515
  2339  000C86  0A07               	xorlw	7	; case 100
  2340  000C88  B4D8               	btfsc	status,2,c
  2341  000C8A  D013               	goto	l2529
  2342  000C8C  0A0D               	xorlw	13	; case 105
  2343  000C8E  B4D8               	btfsc	status,2,c
  2344  000C90  D010               	goto	l2529
  2345  000C92  0A06               	xorlw	6	; case 111
  2346  000C94  B4D8               	btfsc	status,2,c
  2347  000C96  D6F8               	goto	l2459
  2348  000C98  0A1F               	xorlw	31	; case 112
  2349  000C9A  B4D8               	btfsc	status,2,c
  2350  000C9C  D6F8               	goto	l2461
  2351  000C9E  0A03               	xorlw	3	; case 115
  2352  000CA0  B4D8               	btfsc	status,2,c
  2353  000CA2  D6FC               	goto	l2463
  2354  000CA4  0A06               	xorlw	6	; case 117
  2355  000CA6  B4D8               	btfsc	status,2,c
  2356  000CA8  D7D6               	goto	l2523
  2357  000CAA  0A0D               	xorlw	13	; case 120
  2358  000CAC  B4D8               	btfsc	status,2,c
  2359  000CAE  D6F3               	goto	l156
  2360  000CB0  D7C6               	goto	l2519
  2361  000CB2                     l2529:
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  2365  000CB2  0EC0               	movlw	192
  2366  000CB4  0100               	movlb	0	; () banked
  2367  000CB6  1573               	andwf	sprintf@flag& (0+255),w,b
  2368  000CB8  6E2A               	movwf	??_sprintf& (0+255),c
  2369  000CBA  0E00               	movlw	0
  2370  000CBC  0100               	movlb	0	; () banked
  2371  000CBE  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  2372  000CC0  6E2B               	movwf	(??_sprintf+1)& (0+255),c
  2373  000CC2  502A               	movf	??_sprintf,w,c
  2374  000CC4  102B               	iorwf	??_sprintf+1,w,c
  2375  000CC6  A4D8               	btfss	status,2,c
  2376  000CC8  D019               	goto	l2541
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;doprnt.c: 1253: {
  2380                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2381  000CCA  C06B  FFD9         	movff	sprintf@ap,fsr2l
  2382  000CCE  C06C  FFDA         	movff	sprintf@ap+1,fsr2h
  2383  000CD2  CFDE F06D          	movff	postinc2,sprintf@val
  2384  000CD6  CFDD F06E          	movff	postdec2,sprintf@val+1
  2385                           
  2386                           ; BSR set to: 0
  2387  000CDA  0E02               	movlw	2
  2388  000CDC  0100               	movlb	0	; () banked
  2389  000CDE  276B               	addwf	sprintf@ap& (0+255),f,b
  2390  000CE0  0E00               	movlw	0
  2391  000CE2  236C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;doprnt.c: 1261: if((int)val < 0) {
  2395  000CE4  0100               	movlb	0	; () banked
  2396  000CE6  AF6E               	btfss	(sprintf@val+1)& (0+255),7,b
  2397  000CE8  D016               	goto	l2545
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;doprnt.c: 1262: flag |= 0x03;
  2401  000CEA  0E03               	movlw	3
  2402  000CEC  0100               	movlb	0	; () banked
  2403  000CEE  1373               	iorwf	sprintf@flag& (0+255),f,b
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;doprnt.c: 1263: val = -val;
  2407  000CF0  0100               	movlb	0	; () banked
  2408  000CF2  6D6D               	negf	sprintf@val& (0+255),b
  2409  000CF4  1F6E               	comf	(sprintf@val+1)& (0+255),f,b
  2410  000CF6  B0D8               	btfsc	status,0,c
  2411  000CF8  2B6E               	incf	(sprintf@val+1)& (0+255),f,b
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;doprnt.c: 1264: }
  2415                           ;doprnt.c: 1266: }
  2416  000CFA  D00D               	goto	l2545
  2417  000CFC                     l2541:
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;doprnt.c: 1268: else
  2421                           ;doprnt.c: 1273: {
  2422                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2423  000CFC  C06B  FFD9         	movff	sprintf@ap,fsr2l
  2424  000D00  C06C  FFDA         	movff	sprintf@ap+1,fsr2h
  2425  000D04  CFDE F06D          	movff	postinc2,sprintf@val
  2426  000D08  CFDD F06E          	movff	postdec2,sprintf@val+1
  2427                           
  2428                           ; BSR set to: 0
  2429  000D0C  0E02               	movlw	2
  2430  000D0E  0100               	movlb	0	; () banked
  2431  000D10  276B               	addwf	sprintf@ap& (0+255),f,b
  2432  000D12  0E00               	movlw	0
  2433  000D14  236C               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2434  000D16                     l2545:
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;doprnt.c: 1287: }
  2438                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2439  000D16  0100               	movlb	0	; () banked
  2440  000D18  516F               	movf	sprintf@prec& (0+255),w,b
  2441  000D1A  0100               	movlb	0	; () banked
  2442  000D1C  A4D8               	btfss	status,2,c
  2443  000D1E  D063               	goto	l2595
  2444                           
  2445                           ; BSR set to: 0
  2446  000D20  0100               	movlb	0	; () banked
  2447  000D22  516D               	movf	sprintf@val& (0+255),w,b
  2448  000D24  0100               	movlb	0	; () banked
  2449  000D26  116E               	iorwf	(sprintf@val+1)& (0+255),w,b
  2450  000D28  A4D8               	btfss	status,2,c
  2451  000D2A  D05D               	goto	l2595
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;doprnt.c: 1291: prec++;
  2455  000D2C  0100               	movlb	0	; () banked
  2456  000D2E  2B6F               	incf	sprintf@prec& (0+255),f,b
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2460  000D30  D05A               	goto	l2595
  2461  000D32                     l2551:
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;doprnt.c: 1302: case 0xC0:
  2465                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2466  000D32  0E01               	movlw	1
  2467  000D34  0100               	movlb	0	; () banked
  2468  000D36  6F72               	movwf	sprintf@c& (0+255),b
  2469  000D38                     l2553:
  2470                           
  2471                           ; BSR set to: 0
  2472  000D38  0E05               	movlw	5
  2473  000D3A  0100               	movlb	0	; () banked
  2474  000D3C  1972               	xorwf	sprintf@c& (0+255),w,b
  2475  000D3E  B4D8               	btfsc	status,2,c
  2476  000D40  D061               	goto	l2597
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;doprnt.c: 1306: if(val < dpowers[c])
  2480                           
  2481                           ; BSR set to: 0
  2482                           
  2483                           ; BSR set to: 0
  2484  000D42  0100               	movlb	0	; () banked
  2485  000D44  5172               	movf	sprintf@c& (0+255),w,b
  2486  000D46  0D02               	mullw	2
  2487  000D48  0E0D               	movlw	low _dpowers
  2488  000D4A  24F3               	addwf	prodl,w,c
  2489  000D4C  6EF6               	movwf	tblptrl,c
  2490  000D4E  0E08               	movlw	high _dpowers
  2491  000D50  20F4               	addwfc	prodh,w,c
  2492  000D52  6EF7               	movwf	tblptrh,c
  2493  000D54                     	if	0	;There are less than 3 active tblptr bytes
  2494  000D54                     	endif
  2495  000D54  0009               	tblrd		*+
  2496  000D56  50F5               	movf	tablat,w,c
  2497  000D58  0100               	movlb	0	; () banked
  2498  000D5A  5D6D               	subwf	sprintf@val& (0+255),w,b
  2499  000D5C  0009               	tblrd		*+
  2500  000D5E  50F5               	movf	tablat,w,c
  2501  000D60  0100               	movlb	0	; () banked
  2502  000D62  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  2503  000D64  A0D8               	btfss	status,0,c
  2504  000D66  D04E               	goto	l2597
  2505                           
  2506                           ; BSR set to: 0
  2507                           
  2508                           ; BSR set to: 0
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;doprnt.c: 1307: break;
  2512  000D68  0100               	movlb	0	; () banked
  2513  000D6A  2B72               	incf	sprintf@c& (0+255),f,b
  2514  000D6C  D7E5               	goto	l2553
  2515  000D6E                     l2565:
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2519  000D6E  0E01               	movlw	1
  2520  000D70  0100               	movlb	0	; () banked
  2521  000D72  6F72               	movwf	sprintf@c& (0+255),b
  2522  000D74                     l2567:
  2523                           
  2524                           ; BSR set to: 0
  2525  000D74  0E04               	movlw	4
  2526  000D76  0100               	movlb	0	; () banked
  2527  000D78  1972               	xorwf	sprintf@c& (0+255),w,b
  2528  000D7A  B4D8               	btfsc	status,2,c
  2529  000D7C  D043               	goto	l2597
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2533                           
  2534                           ; BSR set to: 0
  2535                           
  2536                           ; BSR set to: 0
  2537  000D7E  0100               	movlb	0	; () banked
  2538  000D80  5172               	movf	sprintf@c& (0+255),w,b
  2539  000D82  0D02               	mullw	2
  2540  000D84  0E17               	movlw	low _hexpowers
  2541  000D86  24F3               	addwf	prodl,w,c
  2542  000D88  6EF6               	movwf	tblptrl,c
  2543  000D8A  0E08               	movlw	high _hexpowers
  2544  000D8C  20F4               	addwfc	prodh,w,c
  2545  000D8E  6EF7               	movwf	tblptrh,c
  2546  000D90                     	if	0	;There are less than 3 active tblptr bytes
  2547  000D90                     	endif
  2548  000D90  0009               	tblrd		*+
  2549  000D92  50F5               	movf	tablat,w,c
  2550  000D94  0100               	movlb	0	; () banked
  2551  000D96  5D6D               	subwf	sprintf@val& (0+255),w,b
  2552  000D98  0009               	tblrd		*+
  2553  000D9A  50F5               	movf	tablat,w,c
  2554  000D9C  0100               	movlb	0	; () banked
  2555  000D9E  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  2556  000DA0  A0D8               	btfss	status,0,c
  2557  000DA2  D030               	goto	l2597
  2558                           
  2559                           ; BSR set to: 0
  2560                           
  2561                           ; BSR set to: 0
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;doprnt.c: 1318: break;
  2565  000DA4  0100               	movlb	0	; () banked
  2566  000DA6  2B72               	incf	sprintf@c& (0+255),f,b
  2567  000DA8  D7E5               	goto	l2567
  2568  000DAA                     l2579:
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  2572  000DAA  0E01               	movlw	1
  2573  000DAC  0100               	movlb	0	; () banked
  2574  000DAE  6F72               	movwf	sprintf@c& (0+255),b
  2575  000DB0                     l2581:
  2576                           
  2577                           ; BSR set to: 0
  2578  000DB0  0E06               	movlw	6
  2579  000DB2  0100               	movlb	0	; () banked
  2580  000DB4  1972               	xorwf	sprintf@c& (0+255),w,b
  2581  000DB6  B4D8               	btfsc	status,2,c
  2582  000DB8  D025               	goto	l2597
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;doprnt.c: 1329: if(val < octpowers[c])
  2586                           
  2587                           ; BSR set to: 0
  2588                           
  2589                           ; BSR set to: 0
  2590  000DBA  0100               	movlb	0	; () banked
  2591  000DBC  5172               	movf	sprintf@c& (0+255),w,b
  2592  000DBE  0D02               	mullw	2
  2593  000DC0  0E01               	movlw	low _octpowers
  2594  000DC2  24F3               	addwf	prodl,w,c
  2595  000DC4  6EF6               	movwf	tblptrl,c
  2596  000DC6  0E08               	movlw	high _octpowers
  2597  000DC8  20F4               	addwfc	prodh,w,c
  2598  000DCA  6EF7               	movwf	tblptrh,c
  2599  000DCC                     	if	0	;There are less than 3 active tblptr bytes
  2600  000DCC                     	endif
  2601  000DCC  0009               	tblrd		*+
  2602  000DCE  50F5               	movf	tablat,w,c
  2603  000DD0  0100               	movlb	0	; () banked
  2604  000DD2  5D6D               	subwf	sprintf@val& (0+255),w,b
  2605  000DD4  0009               	tblrd		*+
  2606  000DD6  50F5               	movf	tablat,w,c
  2607  000DD8  0100               	movlb	0	; () banked
  2608  000DDA  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  2609  000DDC  A0D8               	btfss	status,0,c
  2610  000DDE  D012               	goto	l2597
  2611                           
  2612                           ; BSR set to: 0
  2613                           
  2614                           ; BSR set to: 0
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;doprnt.c: 1330: break;
  2618  000DE0  0100               	movlb	0	; () banked
  2619  000DE2  2B72               	incf	sprintf@c& (0+255),f,b
  2620  000DE4  D7E5               	goto	l2581
  2621  000DE6                     l2595:
  2622                           
  2623                           ; BSR set to: 0
  2624  000DE6  0100               	movlb	0	; () banked
  2625  000DE8  5173               	movf	sprintf@flag& (0+255),w,b
  2626  000DEA  0BC0               	andlw	192
  2627                           
  2628                           ; Switch size 1, requested type "space"
  2629                           ; Number of cases is 4, Range of values is 0 to 192
  2630                           ; switch strategies available:
  2631                           ; Name         Instructions Cycles
  2632                           ; simple_byte           13     7 (average)
  2633                           ;	Chosen strategy is simple_byte
  2634  000DEC  0A00               	xorlw	0	; case 0
  2635  000DEE  B4D8               	btfsc	status,2,c
  2636  000DF0  D7A0               	goto	l2551
  2637  000DF2  0A40               	xorlw	64	; case 64
  2638  000DF4  B4D8               	btfsc	status,2,c
  2639  000DF6  D7D9               	goto	l2579
  2640  000DF8  0AC0               	xorlw	192	; case 128
  2641  000DFA  B4D8               	btfsc	status,2,c
  2642  000DFC  D7B8               	goto	l2565
  2643  000DFE  0A40               	xorlw	64	; case 192
  2644  000E00  B4D8               	btfsc	status,2,c
  2645  000E02  D797               	goto	l2551
  2646  000E04                     l2597:
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;doprnt.c: 1339: if(c < prec)
  2650  000E04  0100               	movlb	0	; () banked
  2651  000E06  5172               	movf	sprintf@c& (0+255),w,b
  2652  000E08  0A80               	xorlw	128
  2653  000E0A  6E2A               	movwf	??_sprintf& (0+255),c
  2654  000E0C  0100               	movlb	0	; () banked
  2655  000E0E  516F               	movf	sprintf@prec& (0+255),w,b
  2656  000E10  0A80               	xorlw	128
  2657  000E12  5C2A               	subwf	??_sprintf& (0+255),w,c
  2658  000E14  B0D8               	btfsc	status,0,c
  2659  000E16  D003               	goto	l2601
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;doprnt.c: 1340: c = prec;
  2663  000E18  C06F  F072         	movff	sprintf@prec,sprintf@c
  2664  000E1C  D00B               	goto	l2605
  2665  000E1E                     l2601:
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;doprnt.c: 1341: else if(prec < c)
  2669  000E1E  0100               	movlb	0	; () banked
  2670  000E20  516F               	movf	sprintf@prec& (0+255),w,b
  2671  000E22  0A80               	xorlw	128
  2672  000E24  6E2A               	movwf	??_sprintf& (0+255),c
  2673  000E26  0100               	movlb	0	; () banked
  2674  000E28  5172               	movf	sprintf@c& (0+255),w,b
  2675  000E2A  0A80               	xorlw	128
  2676  000E2C  5C2A               	subwf	??_sprintf& (0+255),w,c
  2677  000E2E  A0D8               	btfss	status,0,c
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;doprnt.c: 1342: prec = c;
  2681  000E30  C072  F06F         	movff	sprintf@c,sprintf@prec
  2682  000E34                     l2605:
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2686  000E34  0100               	movlb	0	; () banked
  2687  000E36  5170               	movf	sprintf@width& (0+255),w,b
  2688  000E38  0100               	movlb	0	; () banked
  2689  000E3A  1171               	iorwf	(sprintf@width+1)& (0+255),w,b
  2690  000E3C  B4D8               	btfsc	status,2,c
  2691  000E3E  D010               	goto	l2611
  2692                           
  2693                           ; BSR set to: 0
  2694  000E40  0E03               	movlw	3
  2695  000E42  0100               	movlb	0	; () banked
  2696  000E44  1573               	andwf	sprintf@flag& (0+255),w,b
  2697  000E46  6E2A               	movwf	??_sprintf& (0+255),c
  2698  000E48  0E00               	movlw	0
  2699  000E4A  0100               	movlb	0	; () banked
  2700  000E4C  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  2701  000E4E  6E2B               	movwf	(??_sprintf+1)& (0+255),c
  2702  000E50  502A               	movf	??_sprintf,w,c
  2703  000E52  102B               	iorwf	??_sprintf+1,w,c
  2704  000E54  B4D8               	btfsc	status,2,c
  2705  000E56  D004               	goto	l2611
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;doprnt.c: 1346: width--;
  2709  000E58  0100               	movlb	0	; () banked
  2710  000E5A  0770               	decf	sprintf@width& (0+255),f,b
  2711  000E5C  A0D8               	btfss	status,0,c
  2712  000E5E  0771               	decf	(sprintf@width+1)& (0+255),f,b
  2713  000E60                     l2611:
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2717  000E60  0100               	movlb	0	; () banked
  2718  000E62  AD74               	btfss	(sprintf@flag+1)& (0+255),6,b
  2719  000E64  D01F               	goto	l2619
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;doprnt.c: 1349: if(width > prec)
  2723  000E66  0E80               	movlw	128
  2724  000E68  0100               	movlb	0	; () banked
  2725  000E6A  BF6F               	btfsc	sprintf@prec& (0+255),7,b
  2726  000E6C  0E7F               	movlw	127
  2727  000E6E  6E2A               	movwf	??_sprintf& (0+255),c
  2728  000E70  0100               	movlb	0	; () banked
  2729  000E72  5170               	movf	sprintf@width& (0+255),w,b
  2730  000E74  0100               	movlb	0	; () banked
  2731  000E76  5D6F               	subwf	sprintf@prec& (0+255),w,b
  2732  000E78  0100               	movlb	0	; () banked
  2733  000E7A  5171               	movf	(sprintf@width+1)& (0+255),w,b
  2734  000E7C  0A80               	xorlw	128
  2735  000E7E  582A               	subwfb	??_sprintf& (0+255),w,c
  2736  000E80  B0D8               	btfsc	status,0,c
  2737  000E82  D00B               	goto	l2617
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;doprnt.c: 1350: width -= prec;
  2741  000E84  0100               	movlb	0	; () banked
  2742  000E86  516F               	movf	sprintf@prec& (0+255),w,b
  2743  000E88  0100               	movlb	0	; () banked
  2744  000E8A  5F70               	subwf	sprintf@width& (0+255),f,b
  2745  000E8C  0E00               	movlw	0
  2746  000E8E  0100               	movlb	0	; () banked
  2747  000E90  BF6F               	btfsc	sprintf@prec& (0+255),7,b
  2748  000E92  0EFF               	movlw	255
  2749  000E94  0100               	movlb	0	; () banked
  2750  000E96  5B71               	subwfb	(sprintf@width+1)& (0+255),f,b
  2751  000E98  D005               	goto	l2619
  2752  000E9A                     l2617:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;doprnt.c: 1351: else
  2756                           ;doprnt.c: 1352: width = 0;
  2757  000E9A  0E00               	movlw	0
  2758  000E9C  0100               	movlb	0	; () banked
  2759  000E9E  6F71               	movwf	(sprintf@width+1)& (0+255),b
  2760  000EA0  0E00               	movlw	0
  2761  000EA2  6F70               	movwf	sprintf@width& (0+255),b
  2762  000EA4                     l2619:
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;doprnt.c: 1353: }
  2766                           ;doprnt.c: 1357: if((flag & (
  2767                           ;doprnt.c: 1359: 0x04|
  2768                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  2769  000EA4  0EC4               	movlw	196
  2770  000EA6  6E2A               	movwf	??_sprintf& (0+255),c
  2771  000EA8  0E08               	movlw	8
  2772  000EAA  6E2B               	movwf	(??_sprintf+1)& (0+255),c
  2773  000EAC  C073  F02C         	movff	sprintf@flag,??_sprintf+2
  2774  000EB0  C074  F02D         	movff	sprintf@flag+1,??_sprintf+3
  2775  000EB4  502A               	movf	??_sprintf,w,c
  2776  000EB6  162C               	andwf	??_sprintf+2,f,c
  2777  000EB8  502B               	movf	??_sprintf+1,w,c
  2778  000EBA  162D               	andwf	??_sprintf+3,f,c
  2779  000EBC  0E40               	movlw	64
  2780  000EBE  182C               	xorwf	??_sprintf+2,w,c
  2781  000EC0  E10F               	bnz	l2625
  2782  000EC2  0E08               	movlw	8
  2783  000EC4  182D               	xorwf	??_sprintf+3,w,c
  2784  000EC6  A4D8               	btfss	status,2,c
  2785  000EC8  D00B               	goto	l2625
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;doprnt.c: 1362: if(width)
  2789  000ECA  0100               	movlb	0	; () banked
  2790  000ECC  5170               	movf	sprintf@width& (0+255),w,b
  2791  000ECE  0100               	movlb	0	; () banked
  2792  000ED0  1171               	iorwf	(sprintf@width+1)& (0+255),w,b
  2793  000ED2  B4D8               	btfsc	status,2,c
  2794  000ED4  D02E               	goto	l2633
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;doprnt.c: 1363: width--;
  2798  000ED6  0100               	movlb	0	; () banked
  2799  000ED8  0770               	decf	sprintf@width& (0+255),f,b
  2800  000EDA  A0D8               	btfss	status,0,c
  2801  000EDC  0771               	decf	(sprintf@width+1)& (0+255),f,b
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;doprnt.c: 1364: } else
  2805  000EDE  D029               	goto	l2633
  2806  000EE0                     l2625:
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  2810  000EE0  0EC0               	movlw	192
  2811  000EE2  6E2A               	movwf	??_sprintf& (0+255),c
  2812  000EE4  0E08               	movlw	8
  2813  000EE6  6E2B               	movwf	(??_sprintf+1)& (0+255),c
  2814  000EE8  C073  F02C         	movff	sprintf@flag,??_sprintf+2
  2815  000EEC  C074  F02D         	movff	sprintf@flag+1,??_sprintf+3
  2816  000EF0  502A               	movf	??_sprintf,w,c
  2817  000EF2  162C               	andwf	??_sprintf+2,f,c
  2818  000EF4  502B               	movf	??_sprintf+1,w,c
  2819  000EF6  162D               	andwf	??_sprintf+3,f,c
  2820  000EF8  0E80               	movlw	128
  2821  000EFA  182C               	xorwf	??_sprintf+2,w,c
  2822  000EFC  E11A               	bnz	l2633
  2823  000EFE  0E08               	movlw	8
  2824  000F00  182D               	xorwf	??_sprintf+3,w,c
  2825  000F02  A4D8               	btfss	status,2,c
  2826  000F04  D016               	goto	l2633
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;doprnt.c: 1372: if(width > 2)
  2830  000F06  0100               	movlb	0	; () banked
  2831  000F08  BF71               	btfsc	(sprintf@width+1)& (0+255),7,b
  2832  000F0A  D00E               	goto	l2631
  2833  000F0C  0100               	movlb	0	; () banked
  2834  000F0E  5171               	movf	(sprintf@width+1)& (0+255),w,b
  2835  000F10  E105               	bnz	u2290
  2836  000F12  0E03               	movlw	3
  2837  000F14  0100               	movlb	0	; () banked
  2838  000F16  5D70               	subwf	sprintf@width& (0+255),w,b
  2839  000F18  A0D8               	btfss	status,0,c
  2840  000F1A  D006               	goto	l2631
  2841  000F1C                     u2290:
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;doprnt.c: 1373: width -= 2;
  2845  000F1C  0100               	movlb	0	; () banked
  2846  000F1E  0EFE               	movlw	254
  2847  000F20  2770               	addwf	sprintf@width& (0+255),f,b
  2848  000F22  0EFF               	movlw	255
  2849  000F24  2371               	addwfc	(sprintf@width+1)& (0+255),f,b
  2850  000F26  D005               	goto	l2633
  2851  000F28                     l2631:
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;doprnt.c: 1374: else
  2855                           ;doprnt.c: 1375: width = 0;
  2856  000F28  0E00               	movlw	0
  2857  000F2A  0100               	movlb	0	; () banked
  2858  000F2C  6F71               	movwf	(sprintf@width+1)& (0+255),b
  2859  000F2E  0E00               	movlw	0
  2860  000F30  6F70               	movwf	sprintf@width& (0+255),b
  2861  000F32                     l2633:
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;doprnt.c: 1376: }
  2865                           ;doprnt.c: 1381: if(width > c)
  2866  000F32  0E80               	movlw	128
  2867  000F34  0100               	movlb	0	; () banked
  2868  000F36  BF72               	btfsc	sprintf@c& (0+255),7,b
  2869  000F38  0E7F               	movlw	127
  2870  000F3A  6E2A               	movwf	??_sprintf& (0+255),c
  2871  000F3C  0100               	movlb	0	; () banked
  2872  000F3E  5170               	movf	sprintf@width& (0+255),w,b
  2873  000F40  0100               	movlb	0	; () banked
  2874  000F42  5D72               	subwf	sprintf@c& (0+255),w,b
  2875  000F44  0100               	movlb	0	; () banked
  2876  000F46  5171               	movf	(sprintf@width+1)& (0+255),w,b
  2877  000F48  0A80               	xorlw	128
  2878  000F4A  582A               	subwfb	??_sprintf& (0+255),w,c
  2879  000F4C  B0D8               	btfsc	status,0,c
  2880  000F4E  D00B               	goto	l2637
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;doprnt.c: 1382: width -= c;
  2884  000F50  0100               	movlb	0	; () banked
  2885  000F52  5172               	movf	sprintf@c& (0+255),w,b
  2886  000F54  0100               	movlb	0	; () banked
  2887  000F56  5F70               	subwf	sprintf@width& (0+255),f,b
  2888  000F58  0E00               	movlw	0
  2889  000F5A  0100               	movlb	0	; () banked
  2890  000F5C  BF72               	btfsc	sprintf@c& (0+255),7,b
  2891  000F5E  0EFF               	movlw	255
  2892  000F60  0100               	movlb	0	; () banked
  2893  000F62  5B71               	subwfb	(sprintf@width+1)& (0+255),f,b
  2894  000F64  D005               	goto	l2639
  2895  000F66                     l2637:
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;doprnt.c: 1383: else
  2899                           ;doprnt.c: 1384: width = 0;
  2900  000F66  0E00               	movlw	0
  2901  000F68  0100               	movlb	0	; () banked
  2902  000F6A  6F71               	movwf	(sprintf@width+1)& (0+255),b
  2903  000F6C  0E00               	movlw	0
  2904  000F6E  6F70               	movwf	sprintf@width& (0+255),b
  2905  000F70                     l2639:
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;doprnt.c: 1387: if(flag & 0x04) {
  2909  000F70  0100               	movlb	0	; () banked
  2910  000F72  A573               	btfss	sprintf@flag& (0+255),2,b
  2911  000F74  D061               	goto	l2675
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;doprnt.c: 1392: if(flag & 0x03)
  2915  000F76  0E03               	movlw	3
  2916  000F78  0100               	movlb	0	; () banked
  2917  000F7A  1573               	andwf	sprintf@flag& (0+255),w,b
  2918  000F7C  6E2A               	movwf	??_sprintf& (0+255),c
  2919  000F7E  0E00               	movlw	0
  2920  000F80  0100               	movlb	0	; () banked
  2921  000F82  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  2922  000F84  6E2B               	movwf	(??_sprintf+1)& (0+255),c
  2923  000F86  502A               	movf	??_sprintf,w,c
  2924  000F88  102B               	iorwf	??_sprintf+1,w,c
  2925  000F8A  B4D8               	btfsc	status,2,c
  2926  000F8C  D009               	goto	l215
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  2930  000F8E  C020  FFD9         	movff	sprintf@sp,fsr2l
  2931  000F92  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  2932  000F96  0E2D               	movlw	45
  2933  000F98  D00B               	goto	L4
  2934  000F9A                     l2645:
  2935                           
  2936                           ; BSR set to: 0
  2937  000F9A  4A20               	infsnz	sprintf@sp,f,c
  2938  000F9C  2A21               	incf	sprintf@sp+1,f,c
  2939  000F9E  D039               	goto	l2667
  2940  000FA0                     l215:
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;doprnt.c: 1396: else
  2944                           ;doprnt.c: 1399: if(flag & 0x01)
  2945  000FA0  0100               	movlb	0	; () banked
  2946  000FA2  A173               	btfss	sprintf@flag& (0+255),0,b
  2947  000FA4  D007               	goto	l2651
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  2951  000FA6  C020  FFD9         	movff	sprintf@sp,fsr2l
  2952  000FAA  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  2953  000FAE  0E20               	movlw	32
  2954  000FB0                     L4:
  2955  000FB0  6EDF               	movwf	indf2,c
  2956  000FB2  D7F3               	goto	l2645
  2957  000FB4                     l2651:
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  2961  000FB4  0EC0               	movlw	192
  2962  000FB6  6E2A               	movwf	??_sprintf& (0+255),c
  2963  000FB8  0E08               	movlw	8
  2964  000FBA  6E2B               	movwf	(??_sprintf+1)& (0+255),c
  2965  000FBC  C073  F02C         	movff	sprintf@flag,??_sprintf+2
  2966  000FC0  C074  F02D         	movff	sprintf@flag+1,??_sprintf+3
  2967  000FC4  502A               	movf	??_sprintf,w,c
  2968  000FC6  162C               	andwf	??_sprintf+2,f,c
  2969  000FC8  502B               	movf	??_sprintf+1,w,c
  2970  000FCA  162D               	andwf	??_sprintf+3,f,c
  2971  000FCC  0E80               	movlw	128
  2972  000FCE  182C               	xorwf	??_sprintf+2,w,c
  2973  000FD0  E120               	bnz	l2667
  2974  000FD2  0E08               	movlw	8
  2975  000FD4  182D               	xorwf	??_sprintf+3,w,c
  2976  000FD6  A4D8               	btfss	status,2,c
  2977  000FD8  D01C               	goto	l2667
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;doprnt.c: 1404: ((*sp++ = ('0')));
  2981  000FDA  C020  FFD9         	movff	sprintf@sp,fsr2l
  2982  000FDE  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  2983  000FE2  0E30               	movlw	48
  2984  000FE4  6EDF               	movwf	indf2,c
  2985                           
  2986                           ; BSR set to: 0
  2987  000FE6  4A20               	infsnz	sprintf@sp,f,c
  2988  000FE8  2A21               	incf	sprintf@sp+1,f,c
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;doprnt.c: 1406: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  2992  000FEA  0100               	movlb	0	; () banked
  2993  000FEC  BB73               	btfsc	sprintf@flag& (0+255),5,b
  2994  000FEE  D005               	goto	l2661
  2995                           
  2996                           ; BSR set to: 0
  2997  000FF0  0E00               	movlw	0
  2998  000FF2  0100               	movlb	0	; () banked
  2999  000FF4  6F62               	movwf	(_sprintf$363+1)& (0+255),b
  3000  000FF6  0E78               	movlw	120
  3001  000FF8  D004               	goto	L5
  3002  000FFA                     l2661:
  3003                           
  3004                           ; BSR set to: 0
  3005  000FFA  0E00               	movlw	0
  3006  000FFC  0100               	movlb	0	; () banked
  3007  000FFE  6F62               	movwf	(_sprintf$363+1)& (0+255),b
  3008  001000  0E58               	movlw	88
  3009  001002                     L5:
  3010  001002  6F61               	movwf	_sprintf$363& (0+255),b
  3011                           
  3012                           ; BSR set to: 0
  3013                           
  3014                           ; BSR set to: 0
  3015  001004  C020  FFD9         	movff	sprintf@sp,fsr2l
  3016  001008  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  3017  00100C  C061  FFDF         	movff	_sprintf$363,indf2
  3018  001010  D7C4               	goto	l2645
  3019  001012                     l2667:
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;doprnt.c: 1412: }
  3023                           ;doprnt.c: 1415: if(width)
  3024  001012  0100               	movlb	0	; () banked
  3025  001014  5170               	movf	sprintf@width& (0+255),w,b
  3026  001016  0100               	movlb	0	; () banked
  3027  001018  1171               	iorwf	(sprintf@width+1)& (0+255),w,b
  3028  00101A  B4D8               	btfsc	status,2,c
  3029  00101C  D11D               	goto	l2739
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3033                           
  3034                           ; BSR set to: 0
  3035                           
  3036                           ;doprnt.c: 1416: do
  3037  00101E  C020  FFD9         	movff	sprintf@sp,fsr2l
  3038  001022  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  3039  001026  0E30               	movlw	48
  3040  001028  6EDF               	movwf	indf2,c
  3041                           
  3042                           ; BSR set to: 0
  3043  00102A  4A20               	infsnz	sprintf@sp,f,c
  3044  00102C  2A21               	incf	sprintf@sp+1,f,c
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;doprnt.c: 1418: while(--width);
  3048  00102E  0100               	movlb	0	; () banked
  3049  001030  0770               	decf	sprintf@width& (0+255),f,b
  3050  001032  A0D8               	btfss	status,0,c
  3051  001034  0771               	decf	(sprintf@width+1)& (0+255),f,b
  3052  001036  D7ED               	goto	l2667
  3053  001038                     l2675:
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;doprnt.c: 1422: {
  3057                           ;doprnt.c: 1424: if(width
  3058                           ;doprnt.c: 1426: && !(flag & 0x08)
  3059                           ;doprnt.c: 1428: )
  3060  001038  0100               	movlb	0	; () banked
  3061  00103A  5170               	movf	sprintf@width& (0+255),w,b
  3062  00103C  0100               	movlb	0	; () banked
  3063  00103E  1171               	iorwf	(sprintf@width+1)& (0+255),w,b
  3064  001040  B4D8               	btfsc	status,2,c
  3065  001042  D015               	goto	l2685
  3066                           
  3067                           ; BSR set to: 0
  3068  001044  0100               	movlb	0	; () banked
  3069  001046  B773               	btfsc	sprintf@flag& (0+255),3,b
  3070  001048  D012               	goto	l2685
  3071  00104A                     l2679:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3075  00104A  C020  FFD9         	movff	sprintf@sp,fsr2l
  3076  00104E  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  3077  001052  0E20               	movlw	32
  3078  001054  6EDF               	movwf	indf2,c
  3079                           
  3080                           ; BSR set to: 0
  3081  001056  4A20               	infsnz	sprintf@sp,f,c
  3082  001058  2A21               	incf	sprintf@sp+1,f,c
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;doprnt.c: 1431: while(--width);
  3086  00105A  0100               	movlb	0	; () banked
  3087  00105C  0770               	decf	sprintf@width& (0+255),f,b
  3088  00105E  A0D8               	btfss	status,0,c
  3089  001060  0771               	decf	(sprintf@width+1)& (0+255),f,b
  3090  001062  0100               	movlb	0	; () banked
  3091  001064  5170               	movf	sprintf@width& (0+255),w,b
  3092  001066  0100               	movlb	0	; () banked
  3093  001068  1171               	iorwf	(sprintf@width+1)& (0+255),w,b
  3094  00106A  A4D8               	btfss	status,2,c
  3095  00106C  D7EE               	goto	l2679
  3096  00106E                     l2685:
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;doprnt.c: 1438: if(flag & 0x03)
  3100  00106E  0E03               	movlw	3
  3101  001070  0100               	movlb	0	; () banked
  3102  001072  1573               	andwf	sprintf@flag& (0+255),w,b
  3103  001074  6E2A               	movwf	??_sprintf& (0+255),c
  3104  001076  0E00               	movlw	0
  3105  001078  0100               	movlb	0	; () banked
  3106  00107A  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  3107  00107C  6E2B               	movwf	(??_sprintf+1)& (0+255),c
  3108  00107E  502A               	movf	??_sprintf,w,c
  3109  001080  102B               	iorwf	??_sprintf+1,w,c
  3110  001082  B4D8               	btfsc	status,2,c
  3111  001084  D009               	goto	l231
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3115  001086  C020  FFD9         	movff	sprintf@sp,fsr2l
  3116  00108A  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  3117  00108E  0E2D               	movlw	45
  3118  001090  D00B               	goto	L6
  3119  001092                     l2689:
  3120                           
  3121                           ; BSR set to: 0
  3122  001092  4A20               	infsnz	sprintf@sp,f,c
  3123  001094  2A21               	incf	sprintf@sp+1,f,c
  3124  001096  D00A               	goto	l2695
  3125  001098                     l231:
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;doprnt.c: 1443: else if(flag & 0x01)
  3129  001098  0100               	movlb	0	; () banked
  3130  00109A  A173               	btfss	sprintf@flag& (0+255),0,b
  3131  00109C  D007               	goto	l2695
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  3135  00109E  C020  FFD9         	movff	sprintf@sp,fsr2l
  3136  0010A2  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  3137  0010A6  0E20               	movlw	32
  3138  0010A8                     L6:
  3139  0010A8  6EDF               	movwf	indf2,c
  3140  0010AA  D7F3               	goto	l2689
  3141  0010AC                     l2695:
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  3145  0010AC  0EC0               	movlw	192
  3146  0010AE  6E2A               	movwf	??_sprintf& (0+255),c
  3147  0010B0  0E08               	movlw	8
  3148  0010B2  6E2B               	movwf	(??_sprintf+1)& (0+255),c
  3149  0010B4  C073  F02C         	movff	sprintf@flag,??_sprintf+2
  3150  0010B8  C074  F02D         	movff	sprintf@flag+1,??_sprintf+3
  3151  0010BC  502A               	movf	??_sprintf,w,c
  3152  0010BE  162C               	andwf	??_sprintf+2,f,c
  3153  0010C0  502B               	movf	??_sprintf+1,w,c
  3154  0010C2  162D               	andwf	??_sprintf+3,f,c
  3155  0010C4  0E40               	movlw	64
  3156  0010C6  182C               	xorwf	??_sprintf+2,w,c
  3157  0010C8  E10B               	bnz	l2701
  3158  0010CA  0E08               	movlw	8
  3159  0010CC  182D               	xorwf	??_sprintf+3,w,c
  3160  0010CE  A4D8               	btfss	status,2,c
  3161  0010D0  D007               	goto	l2701
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;doprnt.c: 1449: ((*sp++ = ('0')));
  3165  0010D2  C020  FFD9         	movff	sprintf@sp,fsr2l
  3166  0010D6  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  3167  0010DA  0E30               	movlw	48
  3168  0010DC  6EDF               	movwf	indf2,c
  3169  0010DE  D0BA               	goto	l2737
  3170  0010E0                     l2701:
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;doprnt.c: 1450: else
  3174                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  3175  0010E0  0EC0               	movlw	192
  3176  0010E2  6E2A               	movwf	??_sprintf& (0+255),c
  3177  0010E4  0E08               	movlw	8
  3178  0010E6  6E2B               	movwf	(??_sprintf+1)& (0+255),c
  3179  0010E8  C073  F02C         	movff	sprintf@flag,??_sprintf+2
  3180  0010EC  C074  F02D         	movff	sprintf@flag+1,??_sprintf+3
  3181  0010F0  502A               	movf	??_sprintf,w,c
  3182  0010F2  162C               	andwf	??_sprintf+2,f,c
  3183  0010F4  502B               	movf	??_sprintf+1,w,c
  3184  0010F6  162D               	andwf	??_sprintf+3,f,c
  3185  0010F8  0E80               	movlw	128
  3186  0010FA  182C               	xorwf	??_sprintf+2,w,c
  3187  0010FC  E103               	bnz	u2441
  3188  0010FE  0E08               	movlw	8
  3189  001100  182D               	xorwf	??_sprintf+3,w,c
  3190  001102  A4D8               	btfss	status,2,c
  3191  001104                     u2441:
  3192  001104  D0A9               	goto	l2739
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;doprnt.c: 1458: ((*sp++ = ('0')));
  3196  001106  C020  FFD9         	movff	sprintf@sp,fsr2l
  3197  00110A  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  3198  00110E  0E30               	movlw	48
  3199  001110  6EDF               	movwf	indf2,c
  3200                           
  3201                           ; BSR set to: 0
  3202  001112  4A20               	infsnz	sprintf@sp,f,c
  3203  001114  2A21               	incf	sprintf@sp+1,f,c
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;doprnt.c: 1460: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
  3207  001116  0100               	movlb	0	; () banked
  3208  001118  BB73               	btfsc	sprintf@flag& (0+255),5,b
  3209  00111A  D005               	goto	l2711
  3210                           
  3211                           ; BSR set to: 0
  3212  00111C  0E00               	movlw	0
  3213  00111E  0100               	movlb	0	; () banked
  3214  001120  6F64               	movwf	(_sprintf$364+1)& (0+255),b
  3215  001122  0E78               	movlw	120
  3216  001124  D004               	goto	L7
  3217  001126                     l2711:
  3218                           
  3219                           ; BSR set to: 0
  3220  001126  0E00               	movlw	0
  3221  001128  0100               	movlb	0	; () banked
  3222  00112A  6F64               	movwf	(_sprintf$364+1)& (0+255),b
  3223  00112C  0E58               	movlw	88
  3224  00112E                     L7:
  3225  00112E  6F63               	movwf	_sprintf$364& (0+255),b
  3226                           
  3227                           ; BSR set to: 0
  3228                           
  3229                           ; BSR set to: 0
  3230  001130  C020  FFD9         	movff	sprintf@sp,fsr2l
  3231  001134  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  3232  001138  C063  FFDF         	movff	_sprintf$364,indf2
  3233  00113C  D08B               	goto	l2737
  3234  00113E                     l2717:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;doprnt.c: 1486: case 0xC0:
  3238                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3239  00113E  0100               	movlb	0	; () banked
  3240  001140  516F               	movf	sprintf@prec& (0+255),w,b
  3241  001142  0D02               	mullw	2
  3242  001144  0E0D               	movlw	low _dpowers
  3243  001146  24F3               	addwf	prodl,w,c
  3244  001148  6EF6               	movwf	tblptrl,c
  3245  00114A  0E08               	movlw	high _dpowers
  3246  00114C  20F4               	addwfc	prodh,w,c
  3247  00114E  6EF7               	movwf	tblptrh,c
  3248  001150                     	if	0	;There are less than 3 active tblptr bytes
  3249  001150                     	endif
  3250  001150  0009               	tblrd		*+
  3251  001152  CFF5 F016          	movff	tablat,___lwdiv@divisor
  3252  001156  000A               	tblrd		*-
  3253  001158  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
  3254  00115C  C06D  F014         	movff	sprintf@val,___lwdiv@dividend
  3255  001160  C06E  F015         	movff	sprintf@val+1,___lwdiv@dividend+1
  3256  001164  ECD8  F00A         	call	___lwdiv	;wreg free
  3257  001168  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
  3258  00116C  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
  3259  001170  0E00               	movlw	0
  3260  001172  6E1E               	movwf	___lwmod@divisor+1,c
  3261  001174  0E0A               	movlw	10
  3262  001176  6E1D               	movwf	___lwmod@divisor,c
  3263  001178  EC2A  F00B         	call	___lwmod	;wreg free
  3264  00117C  501B               	movf	?___lwmod,w,c
  3265  00117E  D051               	goto	L8
  3266  001180                     l2719:
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;doprnt.c: 1499: {
  3270                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3271  001180  C06D  F014         	movff	sprintf@val,___lwdiv@dividend
  3272  001184  C06E  F015         	movff	sprintf@val+1,___lwdiv@dividend+1
  3273  001188  0100               	movlb	0	; () banked
  3274  00118A  516F               	movf	sprintf@prec& (0+255),w,b
  3275  00118C  0D02               	mullw	2
  3276  00118E  0E17               	movlw	low _hexpowers
  3277  001190  24F3               	addwf	prodl,w,c
  3278  001192  6EF6               	movwf	tblptrl,c
  3279  001194  0E08               	movlw	high _hexpowers
  3280  001196  20F4               	addwfc	prodh,w,c
  3281  001198  6EF7               	movwf	tblptrh,c
  3282  00119A                     	if	0	;There are less than 3 active tblptr bytes
  3283  00119A                     	endif
  3284  00119A  0009               	tblrd		*+
  3285  00119C  CFF5 F016          	movff	tablat,___lwdiv@divisor
  3286  0011A0  000A               	tblrd		*-
  3287  0011A2  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
  3288  0011A6  ECD8  F00A         	call	___lwdiv	;wreg free
  3289  0011AA  5014               	movf	?___lwdiv,w,c
  3290  0011AC  0B0F               	andlw	15
  3291  0011AE  0100               	movlb	0	; () banked
  3292  0011B0  6F60               	movwf	sprintf@idx& (0+255),b
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  3296  0011B2  0100               	movlb	0	; () banked
  3297  0011B4  BB73               	btfsc	sprintf@flag& (0+255),5,b
  3298  0011B6  D005               	goto	l2725
  3299                           
  3300                           ; BSR set to: 0
  3301  0011B8  0E78               	movlw	low STR_10
  3302  0011BA  0100               	movlb	0	; () banked
  3303  0011BC  6F65               	movwf	_sprintf$370& (0+255),b
  3304  0011BE  0E08               	movlw	high STR_10
  3305  0011C0  D004               	goto	L9
  3306  0011C2                     l2725:
  3307                           
  3308                           ; BSR set to: 0
  3309  0011C2  0E67               	movlw	low STR_9
  3310  0011C4  0100               	movlb	0	; () banked
  3311  0011C6  6F65               	movwf	_sprintf$370& (0+255),b
  3312  0011C8  0E08               	movlw	high STR_9
  3313  0011CA                     L9:
  3314  0011CA  0100               	movlb	0	; () banked
  3315  0011CC  6F66               	movwf	(_sprintf$370+1)& (0+255),b
  3316                           
  3317                           ; BSR set to: 0
  3318                           
  3319                           ; BSR set to: 0
  3320  0011CE  0100               	movlb	0	; () banked
  3321  0011D0  5160               	movf	sprintf@idx& (0+255),w,b
  3322  0011D2  0D01               	mullw	1
  3323  0011D4  C065  F02A         	movff	_sprintf$370,??_sprintf
  3324  0011D8  C066  F02B         	movff	_sprintf$370+1,??_sprintf+1
  3325  0011DC  50F3               	movf	prodl,w,c
  3326  0011DE  262A               	addwf	??_sprintf,f,c
  3327  0011E0  50F4               	movf	prodh,w,c
  3328  0011E2  222B               	addwfc	??_sprintf+1,f,c
  3329  0011E4  C02A  FFF6         	movff	??_sprintf,tblptrl
  3330  0011E8  C02B  FFF7         	movff	??_sprintf+1,tblptrh
  3331  0011EC                     	if	0	;tblptru may be non-zero
  3332  0011EC                     	endif
  3333  0011EC                     	if	0	;tblptru may be non-zero
  3334  0011EC                     	endif
  3335  0011EC  0008               	tblrd		*
  3336  0011EE  CFF5 F072          	movff	tablat,sprintf@c
  3337                           
  3338                           ;doprnt.c: 1508: }
  3339                           ;doprnt.c: 1510: break;
  3340  0011F2  D02A               	goto	l2735
  3341  0011F4                     l2729:
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  3345  0011F4  C06D  F014         	movff	sprintf@val,___lwdiv@dividend
  3346  0011F8  C06E  F015         	movff	sprintf@val+1,___lwdiv@dividend+1
  3347  0011FC  0100               	movlb	0	; () banked
  3348  0011FE  516F               	movf	sprintf@prec& (0+255),w,b
  3349  001200  0D02               	mullw	2
  3350  001202  0E01               	movlw	low _octpowers
  3351  001204  24F3               	addwf	prodl,w,c
  3352  001206  6EF6               	movwf	tblptrl,c
  3353  001208  0E08               	movlw	high _octpowers
  3354  00120A  20F4               	addwfc	prodh,w,c
  3355  00120C  6EF7               	movwf	tblptrh,c
  3356  00120E                     	if	0	;There are less than 3 active tblptr bytes
  3357  00120E                     	endif
  3358  00120E  0009               	tblrd		*+
  3359  001210  CFF5 F016          	movff	tablat,___lwdiv@divisor
  3360  001214  000A               	tblrd		*-
  3361  001216  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
  3362  00121A  ECD8  F00A         	call	___lwdiv	;wreg free
  3363  00121E  5014               	movf	?___lwdiv,w,c
  3364  001220  0B07               	andlw	7
  3365  001222                     L8:
  3366  001222  0F30               	addlw	48
  3367  001224  0100               	movlb	0	; () banked
  3368  001226  6F72               	movwf	sprintf@c& (0+255),b
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;doprnt.c: 1523: }
  3372                           
  3373                           ;doprnt.c: 1520: break;
  3374  001228  D00F               	goto	l2735
  3375  00122A                     l2733:
  3376                           
  3377                           ; BSR set to: 0
  3378  00122A  0100               	movlb	0	; () banked
  3379  00122C  5173               	movf	sprintf@flag& (0+255),w,b
  3380  00122E  0BC0               	andlw	192
  3381                           
  3382                           ; Switch size 1, requested type "space"
  3383                           ; Number of cases is 4, Range of values is 0 to 192
  3384                           ; switch strategies available:
  3385                           ; Name         Instructions Cycles
  3386                           ; simple_byte           13     7 (average)
  3387                           ;	Chosen strategy is simple_byte
  3388  001230  0A00               	xorlw	0	; case 0
  3389  001232  B4D8               	btfsc	status,2,c
  3390  001234  D784               	goto	l2717
  3391  001236  0A40               	xorlw	64	; case 64
  3392  001238  B4D8               	btfsc	status,2,c
  3393  00123A  D7DC               	goto	l2729
  3394  00123C  0AC0               	xorlw	192	; case 128
  3395  00123E  B4D8               	btfsc	status,2,c
  3396  001240  D79F               	goto	l2719
  3397  001242  0A40               	xorlw	64	; case 192
  3398  001244  B4D8               	btfsc	status,2,c
  3399  001246  D77B               	goto	l2717
  3400  001248                     l2735:
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3404  001248  C020  FFD9         	movff	sprintf@sp,fsr2l
  3405  00124C  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  3406  001250  C072  FFDF         	movff	sprintf@c,indf2
  3407  001254                     l2737:
  3408                           
  3409                           ; BSR set to: 0
  3410  001254  4A20               	infsnz	sprintf@sp,f,c
  3411  001256  2A21               	incf	sprintf@sp+1,f,c
  3412  001258                     l2739:
  3413                           
  3414                           ; BSR set to: 0
  3415  001258  0100               	movlb	0	; () banked
  3416  00125A  076F               	decf	sprintf@prec& (0+255),f,b
  3417  00125C  0100               	movlb	0	; () banked
  3418  00125E  296F               	incf	sprintf@prec& (0+255),w,b
  3419  001260  A4D8               	btfss	status,2,c
  3420  001262  D7E3               	goto	l2733
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;doprnt.c: 1525: }
  3424                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  3425  001264  0100               	movlb	0	; () banked
  3426  001266  A773               	btfss	sprintf@flag& (0+255),3,b
  3427  001268  D01C               	goto	l2749
  3428                           
  3429                           ; BSR set to: 0
  3430  00126A  0100               	movlb	0	; () banked
  3431  00126C  BF71               	btfsc	(sprintf@width+1)& (0+255),7,b
  3432  00126E  D019               	goto	l2749
  3433  001270  0100               	movlb	0	; () banked
  3434  001272  5171               	movf	(sprintf@width+1)& (0+255),w,b
  3435  001274  E104               	bnz	l2743
  3436  001276  0100               	movlb	0	; () banked
  3437  001278  0570               	decf	sprintf@width& (0+255),w,b
  3438  00127A  A0D8               	btfss	status,0,c
  3439  00127C  D012               	goto	l2749
  3440  00127E                     l2743:
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  3444  00127E  C020  FFD9         	movff	sprintf@sp,fsr2l
  3445  001282  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  3446  001286  0E20               	movlw	32
  3447  001288  6EDF               	movwf	indf2,c
  3448                           
  3449                           ; BSR set to: 0
  3450  00128A  4A20               	infsnz	sprintf@sp,f,c
  3451  00128C  2A21               	incf	sprintf@sp+1,f,c
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;doprnt.c: 1531: while(--width);
  3455  00128E  0100               	movlb	0	; () banked
  3456  001290  0770               	decf	sprintf@width& (0+255),f,b
  3457  001292  A0D8               	btfss	status,0,c
  3458  001294  0771               	decf	(sprintf@width+1)& (0+255),f,b
  3459  001296  0100               	movlb	0	; () banked
  3460  001298  5170               	movf	sprintf@width& (0+255),w,b
  3461  00129A  0100               	movlb	0	; () banked
  3462  00129C  1171               	iorwf	(sprintf@width+1)& (0+255),w,b
  3463  00129E  A4D8               	btfss	status,2,c
  3464  0012A0  D7EE               	goto	l2743
  3465  0012A2                     l2749:
  3466                           
  3467                           ; BSR set to: 0
  3468  0012A2  C022  FFF6         	movff	sprintf@f,tblptrl
  3469  0012A6  C023  FFF7         	movff	sprintf@f+1,tblptrh
  3470  0012AA  4A22               	infsnz	sprintf@f,f,c
  3471  0012AC  2A23               	incf	sprintf@f+1,f,c
  3472  0012AE                     	if	0	;tblptru may be non-zero
  3473  0012AE                     	endif
  3474  0012AE                     	if	0	;tblptru may be non-zero
  3475  0012AE                     	endif
  3476  0012AE  0008               	tblrd		*
  3477  0012B0  CFF5 F072          	movff	tablat,sprintf@c
  3478  0012B4  0100               	movlb	0	; () banked
  3479  0012B6  5172               	movf	sprintf@c& (0+255),w,b
  3480  0012B8  A4D8               	btfss	status,2,c
  3481  0012BA  EF65  F004         	goto	l2395
  3482  0012BE                     l2751:
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;doprnt.c: 1538: *sp = 0;
  3486  0012BE  C020  FFD9         	movff	sprintf@sp,fsr2l
  3487  0012C2  C021  FFDA         	movff	sprintf@sp+1,fsr2h
  3488  0012C6  0E00               	movlw	0
  3489  0012C8  6EDF               	movwf	indf2,c
  3490  0012CA  0012               	return	
  3491  0012CC                     __end_of_sprintf:
  3492                           	opt stack 0
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           intcon	equ	0xFF2
  3500                           indf0	equ	0xFEF
  3501                           postinc0	equ	0xFEE
  3502                           fsr0h	equ	0xFEA
  3503                           fsr0l	equ	0xFE9
  3504                           wreg	equ	0xFE8
  3505                           indf2	equ	0xFDF
  3506                           postinc2	equ	0xFDE
  3507                           postdec2	equ	0xFDD
  3508                           fsr2h	equ	0xFDA
  3509                           fsr2l	equ	0xFD9
  3510                           status	equ	0xFD8
  3511                           
  3512 ;; *************** function _isdigit *****************
  3513 ;; Defined at:
  3514 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;  c               1    wreg     unsigned char 
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;  c               1   21[COMRAM] unsigned char 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;		None               void
  3521 ;; Registers used:
  3522 ;;		wreg, status,2, status,0
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3528 ;;      Params:         0       0       0       0       0       0       0       0       0
  3529 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3530 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3531 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3532 ;;Total ram usage:        3 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    2
  3535 ;; This function calls:
  3536 ;;		Nothing
  3537 ;; This function is called by:
  3538 ;;		_sprintf
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           	psect	text11
  3543  0017E0                     __ptext11:
  3544                           	opt stack 0
  3545  0017E0                     _isdigit:
  3546                           	opt stack 26
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;incstack = 0
  3550                           ;isdigit@c stored from wreg
  3551  0017E0  6E16               	movwf	isdigit@c,c
  3552  0017E2  0E00               	movlw	0
  3553  0017E4  6E15               	movwf	_isdigit$940,c
  3554  0017E6  0E3A               	movlw	58
  3555  0017E8  6016               	cpfslt	isdigit@c,c
  3556  0017EA  D005               	goto	l2345
  3557  0017EC  0E2F               	movlw	47
  3558  0017EE  6416               	cpfsgt	isdigit@c,c
  3559  0017F0  D002               	goto	l2345
  3560  0017F2  0E01               	movlw	1
  3561  0017F4  6E15               	movwf	_isdigit$940,c
  3562  0017F6                     l2345:
  3563  0017F6  C015  F014         	movff	_isdigit$940,??_isdigit
  3564  0017FA  3014               	rrcf	??_isdigit,w,c
  3565  0017FC  0012               	return	
  3566  0017FE                     __end_of_isdigit:
  3567                           	opt stack 0
  3568                           tblptru	equ	0xFF8
  3569                           tblptrh	equ	0xFF7
  3570                           tblptrl	equ	0xFF6
  3571                           tablat	equ	0xFF5
  3572                           prodh	equ	0xFF4
  3573                           prodl	equ	0xFF3
  3574                           intcon	equ	0xFF2
  3575                           indf0	equ	0xFEF
  3576                           postinc0	equ	0xFEE
  3577                           fsr0h	equ	0xFEA
  3578                           fsr0l	equ	0xFE9
  3579                           wreg	equ	0xFE8
  3580                           indf2	equ	0xFDF
  3581                           postinc2	equ	0xFDE
  3582                           postdec2	equ	0xFDD
  3583                           fsr2h	equ	0xFDA
  3584                           fsr2l	equ	0xFD9
  3585                           status	equ	0xFD8
  3586                           
  3587 ;; *************** function ___wmul *****************
  3588 ;; Defined at:
  3589 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;  multiplier      2   19[COMRAM] unsigned int 
  3592 ;;  multiplicand    2   21[COMRAM] unsigned int 
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;  product         2   23[COMRAM] unsigned int 
  3595 ;; Return value:  Size  Location     Type
  3596 ;;                  2   19[COMRAM] unsigned int 
  3597 ;; Registers used:
  3598 ;;		wreg, status,2, status,0, prodl, prodh
  3599 ;; Tracked objects:
  3600 ;;		On entry : 0/0
  3601 ;;		On exit  : 0/0
  3602 ;;		Unchanged: 0/0
  3603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3604 ;;      Params:         4       0       0       0       0       0       0       0       0
  3605 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3606 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3607 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3608 ;;Total ram usage:        6 bytes
  3609 ;; Hardware stack levels used:    1
  3610 ;; Hardware stack levels required when called:    2
  3611 ;; This function calls:
  3612 ;;		Nothing
  3613 ;; This function is called by:
  3614 ;;		_sprintf
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618                           	psect	text12
  3619  00177A                     __ptext12:
  3620                           	opt stack 0
  3621  00177A                     ___wmul:
  3622                           	opt stack 26
  3623                           
  3624                           ;incstack = 0
  3625  00177A  5014               	movf	___wmul@multiplier,w,c
  3626  00177C  0216               	mulwf	___wmul@multiplicand,c
  3627  00177E  CFF3 F018          	movff	prodl,___wmul@product
  3628  001782  CFF4 F019          	movff	prodh,___wmul@product+1
  3629  001786  5014               	movf	___wmul@multiplier,w,c
  3630  001788  0217               	mulwf	___wmul@multiplicand+1,c
  3631  00178A  50F3               	movf	prodl,w,c
  3632  00178C  2619               	addwf	___wmul@product+1,f,c
  3633  00178E  5015               	movf	___wmul@multiplier+1,w,c
  3634  001790  0216               	mulwf	___wmul@multiplicand,c
  3635  001792  50F3               	movf	prodl,w,c
  3636  001794  2619               	addwf	___wmul@product+1,f,c
  3637  001796  C018  F014         	movff	___wmul@product,?___wmul
  3638  00179A  C019  F015         	movff	___wmul@product+1,?___wmul+1
  3639  00179E  0012               	return	
  3640  0017A0                     __end_of___wmul:
  3641                           	opt stack 0
  3642                           tblptru	equ	0xFF8
  3643                           tblptrh	equ	0xFF7
  3644                           tblptrl	equ	0xFF6
  3645                           tablat	equ	0xFF5
  3646                           prodh	equ	0xFF4
  3647                           prodl	equ	0xFF3
  3648                           intcon	equ	0xFF2
  3649                           indf0	equ	0xFEF
  3650                           postinc0	equ	0xFEE
  3651                           fsr0h	equ	0xFEA
  3652                           fsr0l	equ	0xFE9
  3653                           wreg	equ	0xFE8
  3654                           indf2	equ	0xFDF
  3655                           postinc2	equ	0xFDE
  3656                           postdec2	equ	0xFDD
  3657                           fsr2h	equ	0xFDA
  3658                           fsr2l	equ	0xFD9
  3659                           status	equ	0xFD8
  3660                           
  3661 ;; *************** function ___lwmod *****************
  3662 ;; Defined at:
  3663 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  dividend        2   26[COMRAM] unsigned int 
  3666 ;;  divisor         2   28[COMRAM] unsigned int 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  counter         1   30[COMRAM] unsigned char 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  2   26[COMRAM] unsigned int 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3678 ;;      Params:         4       0       0       0       0       0       0       0       0
  3679 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3681 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3682 ;;Total ram usage:        5 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    2
  3685 ;; This function calls:
  3686 ;;		Nothing
  3687 ;; This function is called by:
  3688 ;;		_sprintf
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           	psect	text13
  3693  001654                     __ptext13:
  3694                           	opt stack 0
  3695  001654                     ___lwmod:
  3696                           	opt stack 26
  3697                           
  3698                           ;incstack = 0
  3699  001654  501D               	movf	___lwmod@divisor,w,c
  3700  001656  101E               	iorwf	___lwmod@divisor+1,w,c
  3701  001658  B4D8               	btfsc	status,2,c
  3702  00165A  D018               	goto	l796
  3703  00165C  0E01               	movlw	1
  3704  00165E  6E1F               	movwf	___lwmod@counter,c
  3705  001660  D004               	goto	l2383
  3706  001662                     l2381:
  3707  001662  90D8               	bcf	status,0,c
  3708  001664  361D               	rlcf	___lwmod@divisor,f,c
  3709  001666  361E               	rlcf	___lwmod@divisor+1,f,c
  3710  001668  2A1F               	incf	___lwmod@counter,f,c
  3711  00166A                     l2383:
  3712  00166A  AE1E               	btfss	___lwmod@divisor+1,7,c
  3713  00166C  D7FA               	goto	l2381
  3714  00166E                     l2385:
  3715  00166E  501D               	movf	___lwmod@divisor,w,c
  3716  001670  5C1B               	subwf	___lwmod@dividend,w,c
  3717  001672  501E               	movf	___lwmod@divisor+1,w,c
  3718  001674  581C               	subwfb	___lwmod@dividend+1,w,c
  3719  001676  A0D8               	btfss	status,0,c
  3720  001678  D004               	goto	l2389
  3721  00167A  501D               	movf	___lwmod@divisor,w,c
  3722  00167C  5E1B               	subwf	___lwmod@dividend,f,c
  3723  00167E  501E               	movf	___lwmod@divisor+1,w,c
  3724  001680  5A1C               	subwfb	___lwmod@dividend+1,f,c
  3725  001682                     l2389:
  3726  001682  90D8               	bcf	status,0,c
  3727  001684  321E               	rrcf	___lwmod@divisor+1,f,c
  3728  001686  321D               	rrcf	___lwmod@divisor,f,c
  3729  001688  2E1F               	decfsz	___lwmod@counter,f,c
  3730  00168A  D7F1               	goto	l2385
  3731  00168C                     l796:
  3732  00168C  C01B  F01B         	movff	___lwmod@dividend,?___lwmod
  3733  001690  C01C  F01C         	movff	___lwmod@dividend+1,?___lwmod+1
  3734  001694  0012               	return		;funcret
  3735  001696                     __end_of___lwmod:
  3736                           	opt stack 0
  3737                           tblptru	equ	0xFF8
  3738                           tblptrh	equ	0xFF7
  3739                           tblptrl	equ	0xFF6
  3740                           tablat	equ	0xFF5
  3741                           prodh	equ	0xFF4
  3742                           prodl	equ	0xFF3
  3743                           intcon	equ	0xFF2
  3744                           indf0	equ	0xFEF
  3745                           postinc0	equ	0xFEE
  3746                           fsr0h	equ	0xFEA
  3747                           fsr0l	equ	0xFE9
  3748                           wreg	equ	0xFE8
  3749                           indf2	equ	0xFDF
  3750                           postinc2	equ	0xFDE
  3751                           postdec2	equ	0xFDD
  3752                           fsr2h	equ	0xFDA
  3753                           fsr2l	equ	0xFD9
  3754                           status	equ	0xFD8
  3755                           
  3756 ;; *************** function ___lwdiv *****************
  3757 ;; Defined at:
  3758 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;  dividend        2   19[COMRAM] unsigned int 
  3761 ;;  divisor         2   21[COMRAM] unsigned int 
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;  quotient        2   24[COMRAM] unsigned int 
  3764 ;;  counter         1   23[COMRAM] unsigned char 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  2   19[COMRAM] unsigned int 
  3767 ;; Registers used:
  3768 ;;		wreg, status,2, status,0
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3774 ;;      Params:         4       0       0       0       0       0       0       0       0
  3775 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3776 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3777 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3778 ;;Total ram usage:        7 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    2
  3781 ;; This function calls:
  3782 ;;		Nothing
  3783 ;; This function is called by:
  3784 ;;		_sprintf
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           	psect	text14
  3789  0015B0                     __ptext14:
  3790                           	opt stack 0
  3791  0015B0                     ___lwdiv:
  3792                           	opt stack 26
  3793                           
  3794                           ;incstack = 0
  3795  0015B0  0E00               	movlw	0
  3796  0015B2  6E1A               	movwf	___lwdiv@quotient+1,c
  3797  0015B4  0E00               	movlw	0
  3798  0015B6  6E19               	movwf	___lwdiv@quotient,c
  3799  0015B8  5016               	movf	___lwdiv@divisor,w,c
  3800  0015BA  1017               	iorwf	___lwdiv@divisor+1,w,c
  3801  0015BC  B4D8               	btfsc	status,2,c
  3802  0015BE  D01C               	goto	l786
  3803  0015C0  0E01               	movlw	1
  3804  0015C2  6E18               	movwf	___lwdiv@counter,c
  3805  0015C4  D004               	goto	l2363
  3806  0015C6                     l2361:
  3807  0015C6  90D8               	bcf	status,0,c
  3808  0015C8  3616               	rlcf	___lwdiv@divisor,f,c
  3809  0015CA  3617               	rlcf	___lwdiv@divisor+1,f,c
  3810  0015CC  2A18               	incf	___lwdiv@counter,f,c
  3811  0015CE                     l2363:
  3812  0015CE  AE17               	btfss	___lwdiv@divisor+1,7,c
  3813  0015D0  D7FA               	goto	l2361
  3814  0015D2                     l2365:
  3815  0015D2  90D8               	bcf	status,0,c
  3816  0015D4  3619               	rlcf	___lwdiv@quotient,f,c
  3817  0015D6  361A               	rlcf	___lwdiv@quotient+1,f,c
  3818  0015D8  5016               	movf	___lwdiv@divisor,w,c
  3819  0015DA  5C14               	subwf	___lwdiv@dividend,w,c
  3820  0015DC  5017               	movf	___lwdiv@divisor+1,w,c
  3821  0015DE  5815               	subwfb	___lwdiv@dividend+1,w,c
  3822  0015E0  A0D8               	btfss	status,0,c
  3823  0015E2  D005               	goto	l2373
  3824  0015E4  5016               	movf	___lwdiv@divisor,w,c
  3825  0015E6  5E14               	subwf	___lwdiv@dividend,f,c
  3826  0015E8  5017               	movf	___lwdiv@divisor+1,w,c
  3827  0015EA  5A15               	subwfb	___lwdiv@dividend+1,f,c
  3828  0015EC  8019               	bsf	___lwdiv@quotient,0,c
  3829  0015EE                     l2373:
  3830  0015EE  90D8               	bcf	status,0,c
  3831  0015F0  3217               	rrcf	___lwdiv@divisor+1,f,c
  3832  0015F2  3216               	rrcf	___lwdiv@divisor,f,c
  3833  0015F4  2E18               	decfsz	___lwdiv@counter,f,c
  3834  0015F6  D7ED               	goto	l2365
  3835  0015F8                     l786:
  3836  0015F8  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
  3837  0015FC  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3838  001600  0012               	return		;funcret
  3839  001602                     __end_of___lwdiv:
  3840                           	opt stack 0
  3841                           tblptru	equ	0xFF8
  3842                           tblptrh	equ	0xFF7
  3843                           tblptrl	equ	0xFF6
  3844                           tablat	equ	0xFF5
  3845                           prodh	equ	0xFF4
  3846                           prodl	equ	0xFF3
  3847                           intcon	equ	0xFF2
  3848                           indf0	equ	0xFEF
  3849                           postinc0	equ	0xFEE
  3850                           fsr0h	equ	0xFEA
  3851                           fsr0l	equ	0xFE9
  3852                           wreg	equ	0xFE8
  3853                           indf2	equ	0xFDF
  3854                           postinc2	equ	0xFDE
  3855                           postdec2	equ	0xFDD
  3856                           fsr2h	equ	0xFDA
  3857                           fsr2l	equ	0xFD9
  3858                           status	equ	0xFD8
  3859                           
  3860 ;; *************** function _putrsXLCD *****************
  3861 ;; Defined at:
  3862 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\putrxlcd.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  buffer          2   21[COMRAM] PTR const unsigned char 
  3865 ;;		 -> tela(16), 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;		None
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  1    wreg      void 
  3870 ;; Registers used:
  3871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3877 ;;      Params:         2       0       0       0       0       0       0       0       0
  3878 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3879 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3880 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3881 ;;Total ram usage:        2 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    5
  3884 ;; This function calls:
  3885 ;;		_BusyXLCD
  3886 ;;		_WriteDataXLCD
  3887 ;; This function is called by:
  3888 ;;		_AtualizaTela
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text15
  3893  00174C                     __ptext15:
  3894                           	opt stack 0
  3895  00174C                     _putrsXLCD:
  3896                           	opt stack 24
  3897                           
  3898                           ;incstack = 0
  3899  00174C  D00E               	goto	l2217
  3900  00174E                     l2211:
  3901  00174E  EC89  F00B         	call	_BusyXLCD	;wreg free
  3902  001752  0900               	iorlw	0
  3903  001754  A4D8               	btfss	status,2,c
  3904  001756  D7FB               	goto	l2211
  3905  001758  C016  FFD9         	movff	putrsXLCD@buffer,fsr2l
  3906  00175C  C017  FFDA         	movff	putrsXLCD@buffer+1,fsr2h
  3907  001760  50DF               	movf	indf2,w,c
  3908  001762  EC6A  F00B         	call	_WriteDataXLCD
  3909  001766  4A16               	infsnz	putrsXLCD@buffer,f,c
  3910  001768  2A17               	incf	putrsXLCD@buffer+1,f,c
  3911  00176A                     l2217:
  3912  00176A  C016  FFD9         	movff	putrsXLCD@buffer,fsr2l
  3913  00176E  C017  FFDA         	movff	putrsXLCD@buffer+1,fsr2h
  3914  001772  50DF               	movf	indf2,w,c
  3915  001774  B4D8               	btfsc	status,2,c
  3916  001776  0012               	return	
  3917  001778  D7EA               	goto	l2211
  3918  00177A                     __end_of_putrsXLCD:
  3919                           	opt stack 0
  3920                           tblptru	equ	0xFF8
  3921                           tblptrh	equ	0xFF7
  3922                           tblptrl	equ	0xFF6
  3923                           tablat	equ	0xFF5
  3924                           prodh	equ	0xFF4
  3925                           prodl	equ	0xFF3
  3926                           intcon	equ	0xFF2
  3927                           indf0	equ	0xFEF
  3928                           postinc0	equ	0xFEE
  3929                           fsr0h	equ	0xFEA
  3930                           fsr0l	equ	0xFE9
  3931                           wreg	equ	0xFE8
  3932                           indf2	equ	0xFDF
  3933                           postinc2	equ	0xFDE
  3934                           postdec2	equ	0xFDD
  3935                           fsr2h	equ	0xFDA
  3936                           fsr2l	equ	0xFD9
  3937                           status	equ	0xFD8
  3938                           
  3939 ;; *************** function _WriteDataXLCD *****************
  3940 ;; Defined at:
  3941 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\writdata.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  data            1    wreg     unsigned char 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  data            1   20[COMRAM] unsigned char 
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  1    wreg      void 
  3948 ;; Registers used:
  3949 ;;		wreg, status,2, status,0, cstack
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3955 ;;      Params:         0       0       0       0       0       0       0       0       0
  3956 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3957 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3958 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3959 ;;Total ram usage:        1 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    4
  3962 ;; This function calls:
  3963 ;;		_DelayFor18TCY
  3964 ;; This function is called by:
  3965 ;;		_putrsXLCD
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text16
  3970  0016D4                     __ptext16:
  3971                           	opt stack 0
  3972  0016D4                     _WriteDataXLCD:
  3973                           	opt stack 24
  3974                           
  3975                           ;incstack = 0
  3976                           ;WriteDataXLCD@data stored from wreg
  3977  0016D4  6E15               	movwf	WriteDataXLCD@data,c
  3978  0016D6  0EF0               	movlw	240
  3979  0016D8  1693               	andwf	3987,f,c	;volatile
  3980  0016DA  0EF0               	movlw	240
  3981  0016DC  1681               	andwf	3969,f,c	;volatile
  3982  0016DE  3815               	swapf	WriteDataXLCD@data,w,c
  3983  0016E0  0B0F               	andlw	15
  3984  0016E2  0B0F               	andlw	15
  3985  0016E4  1281               	iorwf	3969,f,c	;volatile
  3986  0016E6  8A8A               	bsf	3978,5,c	;volatile
  3987  0016E8  9C8A               	bcf	3978,6,c	;volatile
  3988  0016EA  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  3989  0016EE  888A               	bsf	3978,4,c	;volatile
  3990  0016F0  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  3991  0016F4  988A               	bcf	3978,4,c	;volatile
  3992  0016F6  0EF0               	movlw	240
  3993  0016F8  1681               	andwf	3969,f,c	;volatile
  3994  0016FA  5015               	movf	WriteDataXLCD@data,w,c
  3995  0016FC  0B0F               	andlw	15
  3996  0016FE  1281               	iorwf	3969,f,c	;volatile
  3997  001700  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  3998  001704  888A               	bsf	3978,4,c	;volatile
  3999  001706  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  4000  00170A  988A               	bcf	3978,4,c	;volatile
  4001  00170C  0E0F               	movlw	15
  4002  00170E  1293               	iorwf	3987,f,c	;volatile
  4003  001710  0012               	return	
  4004  001712                     __end_of_WriteDataXLCD:
  4005                           	opt stack 0
  4006                           tblptru	equ	0xFF8
  4007                           tblptrh	equ	0xFF7
  4008                           tblptrl	equ	0xFF6
  4009                           tablat	equ	0xFF5
  4010                           prodh	equ	0xFF4
  4011                           prodl	equ	0xFF3
  4012                           intcon	equ	0xFF2
  4013                           indf0	equ	0xFEF
  4014                           postinc0	equ	0xFEE
  4015                           fsr0h	equ	0xFEA
  4016                           fsr0l	equ	0xFE9
  4017                           wreg	equ	0xFE8
  4018                           indf2	equ	0xFDF
  4019                           postinc2	equ	0xFDE
  4020                           postdec2	equ	0xFDD
  4021                           fsr2h	equ	0xFDA
  4022                           fsr2l	equ	0xFD9
  4023                           status	equ	0xFD8
  4024                           
  4025 ;; *************** function _BusyXLCD *****************
  4026 ;; Defined at:
  4027 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\busyxlcd.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;		None
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;		None
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      unsigned char 
  4034 ;; Registers used:
  4035 ;;		wreg, cstack
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4041 ;;      Params:         0       0       0       0       0       0       0       0       0
  4042 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4043 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4044 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4045 ;;Total ram usage:        0 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    4
  4048 ;; This function calls:
  4049 ;;		_DelayFor18TCY
  4050 ;; This function is called by:
  4051 ;;		_init_XLCD
  4052 ;;		_OpenXLCD
  4053 ;;		_putrsXLCD
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text17
  4058  001712                     __ptext17:
  4059                           	opt stack 0
  4060  001712                     _BusyXLCD:
  4061                           	opt stack 24
  4062                           
  4063                           ;incstack = 0
  4064  001712  8C8A               	bsf	3978,6,c	;volatile
  4065  001714  9A8A               	bcf	3978,5,c	;volatile
  4066  001716  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  4067  00171A  888A               	bsf	3978,4,c	;volatile
  4068  00171C  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  4069  001720  A681               	btfss	3969,3,c	;volatile
  4070  001722  D00A               	goto	l267
  4071  001724  988A               	bcf	3978,4,c	;volatile
  4072  001726  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  4073  00172A  888A               	bsf	3978,4,c	;volatile
  4074  00172C  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  4075  001730  988A               	bcf	3978,4,c	;volatile
  4076  001732  9C8A               	bcf	3978,6,c	;volatile
  4077  001734  0E01               	movlw	1
  4078  001736  0012               	return	
  4079  001738                     l267:
  4080  001738  988A               	bcf	3978,4,c	;volatile
  4081  00173A  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  4082  00173E  888A               	bsf	3978,4,c	;volatile
  4083  001740  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  4084  001744  988A               	bcf	3978,4,c	;volatile
  4085  001746  9C8A               	bcf	3978,6,c	;volatile
  4086  001748  0E00               	movlw	0
  4087  00174A  0012               	return	
  4088  00174C                     __end_of_BusyXLCD:
  4089                           	opt stack 0
  4090                           tblptru	equ	0xFF8
  4091                           tblptrh	equ	0xFF7
  4092                           tblptrl	equ	0xFF6
  4093                           tablat	equ	0xFF5
  4094                           prodh	equ	0xFF4
  4095                           prodl	equ	0xFF3
  4096                           intcon	equ	0xFF2
  4097                           indf0	equ	0xFEF
  4098                           postinc0	equ	0xFEE
  4099                           fsr0h	equ	0xFEA
  4100                           fsr0l	equ	0xFE9
  4101                           wreg	equ	0xFE8
  4102                           indf2	equ	0xFDF
  4103                           postinc2	equ	0xFDE
  4104                           postdec2	equ	0xFDD
  4105                           fsr2h	equ	0xFDA
  4106                           fsr2l	equ	0xFD9
  4107                           status	equ	0xFD8
  4108                           
  4109 ;; *************** function _SetDDRamAddr *****************
  4110 ;; Defined at:
  4111 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\XLCD\setddram.c"
  4112 ;; Parameters:    Size  Location     Type
  4113 ;;  DDaddr          1    wreg     unsigned char 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;  DDaddr          1   23[COMRAM] unsigned char 
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  1    wreg      void 
  4118 ;; Registers used:
  4119 ;;		wreg, status,2, status,0, cstack
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4125 ;;      Params:         0       0       0       0       0       0       0       0       0
  4126 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4127 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4128 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4129 ;;Total ram usage:        4 bytes
  4130 ;; Hardware stack levels used:    1
  4131 ;; Hardware stack levels required when called:    4
  4132 ;; This function calls:
  4133 ;;		_DelayFor18TCY
  4134 ;; This function is called by:
  4135 ;;		_AtualizaTela
  4136 ;;		_OpenXLCD
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text18
  4141  001602                     __ptext18:
  4142                           	opt stack 0
  4143  001602                     _SetDDRamAddr:
  4144                           	opt stack 24
  4145                           
  4146                           ;incstack = 0
  4147                           ;SetDDRamAddr@DDaddr stored from wreg
  4148  001602  6E18               	movwf	SetDDRamAddr@DDaddr,c
  4149  001604  0EF0               	movlw	240
  4150  001606  1693               	andwf	3987,f,c	;volatile
  4151  001608  0EF0               	movlw	240
  4152  00160A  1681               	andwf	3969,f,c	;volatile
  4153  00160C  5018               	movf	SetDDRamAddr@DDaddr,w,c
  4154  00160E  6E15               	movwf	??_SetDDRamAddr& (0+255),c
  4155  001610  6A16               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  4156  001612  8E15               	bsf	??_SetDDRamAddr,7,c
  4157  001614  0E04               	movlw	4
  4158  001616  6E17               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  4159  001618                     u25:
  4160  001618  3416               	rlcf	??_SetDDRamAddr+1,w,c
  4161  00161A  3216               	rrcf	??_SetDDRamAddr+1,f,c
  4162  00161C  3215               	rrcf	??_SetDDRamAddr,f,c
  4163  00161E  2E17               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  4164  001620  D7FB               	goto	u25
  4165  001622  5015               	movf	??_SetDDRamAddr,w,c
  4166  001624  0B0F               	andlw	15
  4167  001626  1281               	iorwf	3969,f,c	;volatile
  4168  001628  9C8A               	bcf	3978,6,c	;volatile
  4169  00162A  9A8A               	bcf	3978,5,c	;volatile
  4170  00162C  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  4171  001630  888A               	bsf	3978,4,c	;volatile
  4172  001632  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  4173  001636  988A               	bcf	3978,4,c	;volatile
  4174  001638  0EF0               	movlw	240
  4175  00163A  1681               	andwf	3969,f,c	;volatile
  4176  00163C  5018               	movf	SetDDRamAddr@DDaddr,w,c
  4177  00163E  0B0F               	andlw	15
  4178  001640  1281               	iorwf	3969,f,c	;volatile
  4179  001642  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  4180  001646  888A               	bsf	3978,4,c	;volatile
  4181  001648  EC32  F00C         	call	_DelayFor18TCY	;wreg free
  4182  00164C  988A               	bcf	3978,4,c	;volatile
  4183  00164E  0E0F               	movlw	15
  4184  001650  1293               	iorwf	3987,f,c	;volatile
  4185  001652  0012               	return	
  4186  001654                     __end_of_SetDDRamAddr:
  4187                           	opt stack 0
  4188                           tblptru	equ	0xFF8
  4189                           tblptrh	equ	0xFF7
  4190                           tblptrl	equ	0xFF6
  4191                           tablat	equ	0xFF5
  4192                           prodh	equ	0xFF4
  4193                           prodl	equ	0xFF3
  4194                           intcon	equ	0xFF2
  4195                           indf0	equ	0xFEF
  4196                           postinc0	equ	0xFEE
  4197                           fsr0h	equ	0xFEA
  4198                           fsr0l	equ	0xFE9
  4199                           wreg	equ	0xFE8
  4200                           indf2	equ	0xFDF
  4201                           postinc2	equ	0xFDE
  4202                           postdec2	equ	0xFDD
  4203                           fsr2h	equ	0xFDA
  4204                           fsr2l	equ	0xFD9
  4205                           status	equ	0xFD8
  4206                           
  4207 ;; *************** function _DelayFor18TCY *****************
  4208 ;; Defined at:
  4209 ;;		line 148 in file "mainzinha.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      void 
  4216 ;; Registers used:
  4217 ;;		wreg, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4223 ;;      Params:         0       0       0       0       0       0       0       0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4225 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4226 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4227 ;;Total ram usage:        0 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    3
  4230 ;; This function calls:
  4231 ;;		_Delay10TCYx
  4232 ;; This function is called by:
  4233 ;;		_BusyXLCD
  4234 ;;		_SetDDRamAddr
  4235 ;;		_WriteCmdXLCD
  4236 ;;		_WriteDataXLCD
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text19
  4241  001864                     __ptext19:
  4242                           	opt stack 0
  4243  001864                     _DelayFor18TCY:
  4244                           	opt stack 25
  4245                           
  4246                           ;mainzinha.c: 149: Delay10TCYx(120);
  4247                           
  4248                           ;incstack = 0
  4249  001864  0E78               	movlw	120
  4250  001866  EC1F  F00C         	call	_Delay10TCYx
  4251  00186A  0012               	return		;funcret
  4252  00186C                     __end_of_DelayFor18TCY:
  4253                           	opt stack 0
  4254                           tblptru	equ	0xFF8
  4255                           tblptrh	equ	0xFF7
  4256                           tblptrl	equ	0xFF6
  4257                           tablat	equ	0xFF5
  4258                           prodh	equ	0xFF4
  4259                           prodl	equ	0xFF3
  4260                           intcon	equ	0xFF2
  4261                           indf0	equ	0xFEF
  4262                           postinc0	equ	0xFEE
  4263                           fsr0h	equ	0xFEA
  4264                           fsr0l	equ	0xFE9
  4265                           wreg	equ	0xFE8
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           postdec2	equ	0xFDD
  4269                           fsr2h	equ	0xFDA
  4270                           fsr2l	equ	0xFD9
  4271                           status	equ	0xFD8
  4272                           
  4273 ;; *************** function _Delay10TCYx *****************
  4274 ;; Defined at:
  4275 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\d10tcyx.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;  unit            1    wreg     unsigned char 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  unit            1   19[COMRAM] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  1    wreg      void 
  4282 ;; Registers used:
  4283 ;;		wreg
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4289 ;;      Params:         0       0       0       0       0       0       0       0       0
  4290 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4291 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4292 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4293 ;;Total ram usage:        1 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    2
  4296 ;; This function calls:
  4297 ;;		Nothing
  4298 ;; This function is called by:
  4299 ;;		_DelayFor18TCY
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           	psect	text20
  4304  00183E                     __ptext20:
  4305                           	opt stack 0
  4306  00183E                     _Delay10TCYx:
  4307                           	opt stack 25
  4308                           
  4309                           ;incstack = 0
  4310                           ;Delay10TCYx@unit stored from wreg
  4311  00183E  6E14               	movwf	Delay10TCYx@unit,c
  4312  001840  0E03               	movlw	3
  4313  001842                     u2627:
  4314  001842  2EE8               	decfsz	wreg,f,c
  4315  001844  D7FE               	bra	u2627
  4316  001846  F000               	nop	
  4317  001848  2E14               	decfsz	Delay10TCYx@unit,f,c
  4318  00184A  D7FA               	goto	l997
  4319  00184C  0012               	return	
  4320  00184E                     __end_of_Delay10TCYx:
  4321                           	opt stack 0
  4322                           tblptru	equ	0xFF8
  4323                           tblptrh	equ	0xFF7
  4324                           tblptrl	equ	0xFF6
  4325                           tablat	equ	0xFF5
  4326                           prodh	equ	0xFF4
  4327                           prodl	equ	0xFF3
  4328                           intcon	equ	0xFF2
  4329                           indf0	equ	0xFEF
  4330                           postinc0	equ	0xFEE
  4331                           fsr0h	equ	0xFEA
  4332                           fsr0l	equ	0xFE9
  4333                           wreg	equ	0xFE8
  4334                           indf2	equ	0xFDF
  4335                           postinc2	equ	0xFDE
  4336                           postdec2	equ	0xFDD
  4337                           fsr2h	equ	0xFDA
  4338                           fsr2l	equ	0xFD9
  4339                           status	equ	0xFD8
  4340                           
  4341 ;; *************** function _pic_ist *****************
  4342 ;; Defined at:
  4343 ;;		line 104 in file "mainzinha.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;		None
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;		None
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  1    wreg      void 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4357 ;;      Params:         0       0       0       0       0       0       0       0       0
  4358 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4359 ;;      Temps:         17       0       0       0       0       0       0       0       0
  4360 ;;      Totals:        17       0       0       0       0       0       0       0       0
  4361 ;;Total ram usage:       17 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    1
  4364 ;; This function calls:
  4365 ;;		_AlternaModo
  4366 ;; This function is called by:
  4367 ;;		Interrupt level 1
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	intcodelo
  4372  000018                     __pintcodelo:
  4373                           	opt stack 0
  4374  000018                     _pic_ist:
  4375                           	opt stack 24
  4376                           
  4377                           ;incstack = 0
  4378  000018  8049               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4379  00001A  CFD8 F003          	movff	status,??_pic_ist
  4380  00001E  CFE8 F004          	movff	wreg,??_pic_ist+1
  4381  000022  CFE0 F005          	movff	bsr,??_pic_ist+2
  4382  000026  CFFA F006          	movff	pclath,??_pic_ist+3
  4383  00002A  CFFB F007          	movff	pclatu,??_pic_ist+4
  4384  00002E  CFE9 F008          	movff	fsr0l,??_pic_ist+5
  4385  000032  CFEA F009          	movff	fsr0h,??_pic_ist+6
  4386  000036  CFE1 F00A          	movff	fsr1l,??_pic_ist+7
  4387  00003A  CFE2 F00B          	movff	fsr1h,??_pic_ist+8
  4388  00003E  CFD9 F00C          	movff	fsr2l,??_pic_ist+9
  4389  000042  CFDA F00D          	movff	fsr2h,??_pic_ist+10
  4390  000046  CFF3 F00E          	movff	prodl,??_pic_ist+11
  4391  00004A  CFF4 F00F          	movff	prodh,??_pic_ist+12
  4392  00004E  CFF6 F010          	movff	tblptrl,??_pic_ist+13
  4393  000052  CFF7 F011          	movff	tblptrh,??_pic_ist+14
  4394  000056  CFF8 F012          	movff	tblptru,??_pic_ist+15
  4395  00005A  CFF5 F013          	movff	tablat,??_pic_ist+16
  4396                           
  4397                           ;mainzinha.c: 106: cont--;
  4398  00005E  0633               	decf	_cont,f,c
  4399  000060  A0D8               	btfss	status,0,c
  4400  000062  0634               	decf	_cont+1,f,c
  4401                           
  4402                           ;mainzinha.c: 107: temp++;
  4403  000064  4A2F               	infsnz	_temp,f,c
  4404  000066  2A30               	incf	_temp+1,f,c
  4405                           
  4406                           ;mainzinha.c: 108: if(TMR0IF){
  4407  000068  A4F2               	btfss	intcon,2,c	;volatile
  4408  00006A  D00D               	goto	i1l75
  4409                           
  4410                           ;mainzinha.c: 109: if(cont<1){
  4411  00006C  BE34               	btfsc	_cont+1,7,c
  4412  00006E  D004               	goto	i1l1699
  4413  000070  5034               	movf	_cont+1,w,c
  4414  000072  E104               	bnz	i1l1701
  4415  000074  0433               	decf	_cont,w,c
  4416  000076  A0D8               	btfss	status,0,c
  4417  000078                     i1l1699:
  4418                           
  4419                           ;mainzinha.c: 110: AlternaModo();
  4420  000078  ECA0  F00A         	call	_AlternaModo	;wreg free
  4421  00007C                     i1l1701:
  4422                           
  4423                           ;mainzinha.c: 111: }
  4424                           ;mainzinha.c: 112: TMR0 = 0;
  4425  00007C  0E00               	movlw	0
  4426  00007E  6ED7               	movwf	4055,c	;volatile
  4427  000080  0E00               	movlw	0
  4428  000082  6ED6               	movwf	4054,c	;volatile
  4429                           
  4430                           ;mainzinha.c: 113: INTCONbits.TMR0IF = 0;
  4431  000084  94F2               	bcf	intcon,2,c	;volatile
  4432  000086                     i1l75:
  4433  000086  C013  FFF5         	movff	??_pic_ist+16,tablat
  4434  00008A  C012  FFF8         	movff	??_pic_ist+15,tblptru
  4435  00008E  C011  FFF7         	movff	??_pic_ist+14,tblptrh
  4436  000092  C010  FFF6         	movff	??_pic_ist+13,tblptrl
  4437  000096  C00F  FFF4         	movff	??_pic_ist+12,prodh
  4438  00009A  C00E  FFF3         	movff	??_pic_ist+11,prodl
  4439  00009E  C00D  FFDA         	movff	??_pic_ist+10,fsr2h
  4440  0000A2  C00C  FFD9         	movff	??_pic_ist+9,fsr2l
  4441  0000A6  C00B  FFE2         	movff	??_pic_ist+8,fsr1h
  4442  0000AA  C00A  FFE1         	movff	??_pic_ist+7,fsr1l
  4443  0000AE  C009  FFEA         	movff	??_pic_ist+6,fsr0h
  4444  0000B2  C008  FFE9         	movff	??_pic_ist+5,fsr0l
  4445  0000B6  C007  FFFB         	movff	??_pic_ist+4,pclatu
  4446  0000BA  C006  FFFA         	movff	??_pic_ist+3,pclath
  4447  0000BE  C005  FFE0         	movff	??_pic_ist+2,bsr
  4448  0000C2  C004  FFE8         	movff	??_pic_ist+1,wreg
  4449  0000C6  C003  FFD8         	movff	??_pic_ist,status
  4450  0000CA  9049               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4451  0000CC  0010               	retfie	
  4452  0000CE                     __end_of_pic_ist:
  4453                           	opt stack 0
  4454                           pclatu	equ	0xFFB
  4455                           pclath	equ	0xFFA
  4456                           tblptru	equ	0xFF8
  4457                           tblptrh	equ	0xFF7
  4458                           tblptrl	equ	0xFF6
  4459                           tablat	equ	0xFF5
  4460                           prodh	equ	0xFF4
  4461                           prodl	equ	0xFF3
  4462                           intcon	equ	0xFF2
  4463                           indf0	equ	0xFEF
  4464                           postinc0	equ	0xFEE
  4465                           fsr0h	equ	0xFEA
  4466                           fsr0l	equ	0xFE9
  4467                           wreg	equ	0xFE8
  4468                           fsr1h	equ	0xFE2
  4469                           fsr1l	equ	0xFE1
  4470                           bsr	equ	0xFE0
  4471                           indf2	equ	0xFDF
  4472                           postinc2	equ	0xFDE
  4473                           postdec2	equ	0xFDD
  4474                           fsr2h	equ	0xFDA
  4475                           fsr2l	equ	0xFD9
  4476                           status	equ	0xFD8
  4477                           
  4478 ;; *************** function _AlternaModo *****************
  4479 ;; Defined at:
  4480 ;;		line 78 in file "mainzinha.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;		None
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;		None
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  1    wreg      void 
  4487 ;; Registers used:
  4488 ;;		wreg, status,2, status,0
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4494 ;;      Params:         0       0       0       0       0       0       0       0       0
  4495 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4496 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4497 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4498 ;;Total ram usage:        2 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; This function calls:
  4501 ;;		Nothing
  4502 ;; This function is called by:
  4503 ;;		_pic_ist
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           	psect	text22
  4508  001540                     __ptext22:
  4509                           	opt stack 0
  4510  001540                     _AlternaModo:
  4511                           	opt stack 24
  4512                           
  4513                           ;mainzinha.c: 79: switch(estado){
  4514                           
  4515                           ;incstack = 0
  4516  001540  D024               	goto	i1l1651
  4517  001542                     i1l1625:
  4518                           
  4519                           ;mainzinha.c: 81: cont = 3;
  4520  001542  0E00               	movlw	0
  4521  001544  6E34               	movwf	_cont+1,c
  4522  001546  0E03               	movlw	3
  4523  001548  6E33               	movwf	_cont,c
  4524                           
  4525                           ;mainzinha.c: 82: estado = 4;
  4526  00154A  0E00               	movlw	0
  4527  00154C  6E48               	movwf	_estado+1,c
  4528  00154E  0E04               	movlw	4
  4529  001550  6E47               	movwf	_estado,c
  4530                           
  4531                           ;mainzinha.c: 83: LATCbits.LATC2 = 1;
  4532  001552  848B               	bsf	3979,2,c	;volatile
  4533                           
  4534                           ;mainzinha.c: 84: LATCbits.LATC0 = 0;
  4535  001554  908B               	bcf	3979,0,c	;volatile
  4536                           
  4537                           ;mainzinha.c: 85: LATCbits.LATC1 = 0;
  4538  001556  928B               	bcf	3979,1,c	;volatile
  4539                           
  4540                           ;mainzinha.c: 86: break;
  4541  001558  0012               	return	
  4542  00155A                     i1l1633:
  4543                           
  4544                           ;mainzinha.c: 88: cont = 4;
  4545  00155A  0E00               	movlw	0
  4546  00155C  6E34               	movwf	_cont+1,c
  4547  00155E  0E04               	movlw	4
  4548  001560  6E33               	movwf	_cont,c
  4549                           
  4550                           ;mainzinha.c: 89: estado = 1;
  4551  001562  0E00               	movlw	0
  4552  001564  6E48               	movwf	_estado+1,c
  4553  001566  0E01               	movlw	1
  4554  001568  6E47               	movwf	_estado,c
  4555                           
  4556                           ;mainzinha.c: 90: LATCbits.LATC0 = 1;
  4557  00156A  808B               	bsf	3979,0,c	;volatile
  4558                           
  4559                           ;mainzinha.c: 91: LATCbits.LATC2 = 0;
  4560  00156C  948B               	bcf	3979,2,c	;volatile
  4561                           
  4562                           ;mainzinha.c: 92: LATCbits.LATC1 = 0;
  4563  00156E  928B               	bcf	3979,1,c	;volatile
  4564                           
  4565                           ;mainzinha.c: 93: break;
  4566  001570  0012               	return	
  4567  001572                     i1l1641:
  4568                           
  4569                           ;mainzinha.c: 95: cont = 4;
  4570  001572  0E00               	movlw	0
  4571  001574  6E34               	movwf	_cont+1,c
  4572  001576  0E04               	movlw	4
  4573  001578  6E33               	movwf	_cont,c
  4574                           
  4575                           ;mainzinha.c: 96: estado = 2;
  4576  00157A  0E00               	movlw	0
  4577  00157C  6E48               	movwf	_estado+1,c
  4578  00157E  0E02               	movlw	2
  4579  001580  6E47               	movwf	_estado,c
  4580                           
  4581                           ;mainzinha.c: 97: LATCbits.LATC1 = 1;
  4582  001582  828B               	bsf	3979,1,c	;volatile
  4583                           
  4584                           ;mainzinha.c: 98: LATCbits.LATC2 = 0;
  4585  001584  948B               	bcf	3979,2,c	;volatile
  4586                           
  4587                           ;mainzinha.c: 99: LATCbits.LATC0 = 0;
  4588  001586  908B               	bcf	3979,0,c	;volatile
  4589                           
  4590                           ;mainzinha.c: 101: }
  4591                           
  4592                           ;mainzinha.c: 100: break;
  4593  001588  0012               	return	
  4594  00158A                     i1l1651:
  4595  00158A  C047  F001         	movff	_estado,??_AlternaModo
  4596  00158E  C048  F002         	movff	_estado+1,??_AlternaModo+1
  4597                           
  4598                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4599                           ; Switch size 1, requested type "space"
  4600                           ; Number of cases is 1, Range of values is 0 to 0
  4601                           ; switch strategies available:
  4602                           ; Name         Instructions Cycles
  4603                           ; simple_byte            4     3 (average)
  4604                           ;	Chosen strategy is simple_byte
  4605  001592  5002               	movf	??_AlternaModo+1,w,c
  4606  001594  0A00               	xorlw	0	; case 0
  4607  001596  A4D8               	btfss	status,2,c
  4608  001598  0012               	return	
  4609                           
  4610                           ; Switch size 1, requested type "space"
  4611                           ; Number of cases is 3, Range of values is 1 to 3
  4612                           ; switch strategies available:
  4613                           ; Name         Instructions Cycles
  4614                           ; simple_byte           10     6 (average)
  4615                           ;	Chosen strategy is simple_byte
  4616  00159A  5001               	movf	??_AlternaModo,w,c
  4617  00159C  0A01               	xorlw	1	; case 1
  4618  00159E  B4D8               	btfsc	status,2,c
  4619  0015A0  D7D0               	goto	i1l1625
  4620  0015A2  0A03               	xorlw	3	; case 2
  4621  0015A4  B4D8               	btfsc	status,2,c
  4622  0015A6  D7D9               	goto	i1l1633
  4623  0015A8  0A01               	xorlw	1	; case 3
  4624  0015AA  A4D8               	btfss	status,2,c
  4625  0015AC  0012               	return	
  4626  0015AE  D7E1               	goto	i1l1641
  4627  0015B0                     __end_of_AlternaModo:
  4628                           	opt stack 0
  4629                           pclatu	equ	0xFFB
  4630                           pclath	equ	0xFFA
  4631                           tblptru	equ	0xFF8
  4632                           tblptrh	equ	0xFF7
  4633                           tblptrl	equ	0xFF6
  4634                           tablat	equ	0xFF5
  4635                           prodh	equ	0xFF4
  4636                           prodl	equ	0xFF3
  4637                           intcon	equ	0xFF2
  4638                           indf0	equ	0xFEF
  4639                           postinc0	equ	0xFEE
  4640                           fsr0h	equ	0xFEA
  4641                           fsr0l	equ	0xFE9
  4642                           wreg	equ	0xFE8
  4643                           fsr1h	equ	0xFE2
  4644                           fsr1l	equ	0xFE1
  4645                           bsr	equ	0xFE0
  4646                           indf2	equ	0xFDF
  4647                           postinc2	equ	0xFDE
  4648                           postdec2	equ	0xFDD
  4649                           fsr2h	equ	0xFDA
  4650                           fsr2l	equ	0xFD9
  4651                           status	equ	0xFD8
  4652                           pclatu	equ	0xFFB
  4653                           pclath	equ	0xFFA
  4654                           tblptru	equ	0xFF8
  4655                           tblptrh	equ	0xFF7
  4656                           tblptrl	equ	0xFF6
  4657                           tablat	equ	0xFF5
  4658                           prodh	equ	0xFF4
  4659                           prodl	equ	0xFF3
  4660                           intcon	equ	0xFF2
  4661                           indf0	equ	0xFEF
  4662                           postinc0	equ	0xFEE
  4663                           fsr0h	equ	0xFEA
  4664                           fsr0l	equ	0xFE9
  4665                           wreg	equ	0xFE8
  4666                           fsr1h	equ	0xFE2
  4667                           fsr1l	equ	0xFE1
  4668                           bsr	equ	0xFE0
  4669                           indf2	equ	0xFDF
  4670                           postinc2	equ	0xFDE
  4671                           postdec2	equ	0xFDD
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676                           	psect	rparam
  4677  0000                     pclatu	equ	0xFFB
  4678                           pclath	equ	0xFFA
  4679                           tblptru	equ	0xFF8
  4680                           tblptrh	equ	0xFF7
  4681                           tblptrl	equ	0xFF6
  4682                           tablat	equ	0xFF5
  4683                           prodh	equ	0xFF4
  4684                           prodl	equ	0xFF3
  4685                           intcon	equ	0xFF2
  4686                           indf0	equ	0xFEF
  4687                           postinc0	equ	0xFEE
  4688                           fsr0h	equ	0xFEA
  4689                           fsr0l	equ	0xFE9
  4690                           wreg	equ	0xFE8
  4691                           fsr1h	equ	0xFE2
  4692                           fsr1l	equ	0xFE1
  4693                           bsr	equ	0xFE0
  4694                           indf2	equ	0xFDF
  4695                           postinc2	equ	0xFDE
  4696                           postdec2	equ	0xFDD
  4697                           fsr2h	equ	0xFDA
  4698                           fsr2l	equ	0xFD9
  4699                           status	equ	0xFD8
  4700                           
  4701                           	psect	temp
  4702  000049                     btemp:
  4703                           	opt stack 0
  4704  000049                     	ds	1
  4705  0000                     int$flags	set	btemp
  4706                           pclatu	equ	0xFFB
  4707                           pclath	equ	0xFFA
  4708                           tblptru	equ	0xFF8
  4709                           tblptrh	equ	0xFF7
  4710                           tblptrl	equ	0xFF6
  4711                           tablat	equ	0xFF5
  4712                           prodh	equ	0xFF4
  4713                           prodl	equ	0xFF3
  4714                           intcon	equ	0xFF2
  4715                           indf0	equ	0xFEF
  4716                           postinc0	equ	0xFEE
  4717                           fsr0h	equ	0xFEA
  4718                           fsr0l	equ	0xFE9
  4719                           wreg	equ	0xFE8
  4720                           fsr1h	equ	0xFE2
  4721                           fsr1l	equ	0xFE1
  4722                           bsr	equ	0xFE0
  4723                           indf2	equ	0xFDF
  4724                           postinc2	equ	0xFDE
  4725                           postdec2	equ	0xFDD
  4726                           fsr2h	equ	0xFDA
  4727                           fsr2l	equ	0xFD9
  4728                           status	equ	0xFD8


Data Sizes:
    Strings     153
    Constant    30
    Data        0
    BSS         24
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      72
    BANK0           160     21      21
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    putrsXLCD@buffer	PTR const unsigned char  size(2) Largest target is 16
		 -> tela(COMRAM[16]), 

    sprintf$370	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[17]), STR_9(CODE[17]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_8(CODE[7]), sprintf@c(BANK0[1]), STR_7(CODE[12]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_6(CODE[11]), STR_5(CODE[18]), STR_4(CODE[18]), STR_3(CODE[18]), 
		 -> STR_2(CODE[18]), STR_1(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> tela(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_AtualizaTela
    _init_XLCD->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr
    _DelayPORXLCD->_Delay1KTCYx
    _AtualizaTela->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _putrsXLCD->_WriteDataXLCD
    _DelayFor18TCY->_Delay10TCYx

Critical Paths under _pic_ist in COMRAM

    _pic_ist->_AlternaModo

Critical Paths under _main in BANK0

    _AtualizaTela->_sprintf

Critical Paths under _pic_ist in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _pic_ist in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _pic_ist in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _pic_ist in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _pic_ist in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _pic_ist in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _pic_ist in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _pic_ist in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7494
                       _AtualizaTela
                       _Delay10KTCYx
                     _config_inicial
                               _init
                          _init_XLCD
 ---------------------------------------------------------------------------------
 (1) _init_XLCD                                            0     0      0     210
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     150
                                             24 COMRAM     1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCmdXLCD                                         1     1      0      45
                                             20 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0      15
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (4) _Delay1KTCYx                                          1     1      0      15
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      15
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_inicial                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AtualizaTela                                         1     1      0    7269
                                             45 COMRAM     1     1      0
                       _SetDDRamAddr
                          _putrsXLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             39    29     10    6704
                                             31 COMRAM    14     4     10
                                              0 BANK0     21    21      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     386
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                             26 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     703
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _putrsXLCD                                            2     0      2     489
                                             21 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (3) _WriteDataXLCD                                        1     1      0      45
                                             20 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0      15
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0      45
                                             20 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        0     0      0      15
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      15
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _pic_ist                                             17    17      0       0
                                              2 COMRAM    17    17      0
                        _AlternaModo
 ---------------------------------------------------------------------------------
 (7) _AlternaModo                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AtualizaTela
     _SetDDRamAddr
       _DelayFor18TCY
         _Delay10TCYx
     _putrsXLCD
       _BusyXLCD
         _DelayFor18TCY
           _Delay10TCYx
       _WriteDataXLCD
         _DelayFor18TCY
           _Delay10TCYx
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _Delay10KTCYx
   _config_inicial
   _init
   _init_XLCD
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
           _Delay10TCYx
       _Delay10KTCYx
       _DelayPORXLCD
         _Delay1KTCYx
       _SetDDRamAddr
         _DelayFor18TCY
           _Delay10TCYx
       _WriteCmdXLCD
         _DelayFor18TCY
           _Delay10TCYx
     _WriteCmdXLCD
       _DelayFor18TCY
         _Delay10TCYx

 _pic_ist (ROOT)
   _AlternaModo

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     15      15       5       13.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      48       1       76.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5D      20        0.0%
DATA                 0      0      5D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Oct 16 20:26:25 2018

                     l98 1454                       u25 1618                       bsr 000FE0  
    ___wmul@multiplicand 0016                      l100 1462                      l231 1098  
                    l215 0FA0                      l155 0A92                      l156 0A96  
                    l267 1738                      l786 15F8                      l796 168C  
                    l997 1840    __size_of_WriteCmdXLCD 003E                      wreg 000FE8  
            _sprintf$370 0065              _sprintf$363 0061              _sprintf$364 0063  
           __CFG_WDT$OFF 000000                     l1003 1830                     l1211 14EE  
                   l1205 14D4                     l1223 151E                     l1215 14FE  
                   l1207 14DE                     l2211 174E                     l1227 152E  
                   l1219 150E                     l1095 181A                     l2217 176A  
                   l2401 08E8                     l2403 08FE                     l2421 0964  
                   l2405 0904                     l2413 0918                     l2407 090A  
                   l2361 15C6                     l2345 17F6                     l2601 0E1E  
                   l2513 0C0E                     l2505 0BE0                     l2417 0946  
                   l2409 0910                     l1609 17C8                     l2363 15CE  
                   l2611 0E60                     l2523 0C56                     l2515 0C26  
                   l2451 0A48                     l2373 15EE                     l2365 15D2  
                   l2381 1662                     l2701 10E0                     l2605 0E34  
                   l2541 0CFC                     l2509 0BFE                     l2461 0A8E  
                   l2437 09F6                     l2429 09C6                     l2383 166A  
                   l2711 1126                     l2631 0F28                     l2551 0D32  
                   l2519 0C3E                     l2471 0ACE                     l2463 0A9C  
                   l2455 0A6A                     l2527 0C5E                     l2385 166E  
                   l2633 0F32                     l2625 0EE0                     l2617 0E9A  
                   l2553 0D38                     l2545 0D16                     l2473 0ADA  
                   l2529 0CB2                     l2449 0A40                     l2457 0A80  
                   l2651 0FB4                     l2619 0EA4                     l2483 0B4C  
                   l2475 0AE0                     l2459 0A88                     l2395 08CA  
                   l2389 1682                     l2725 11C2                     l2717 113E  
                   l2733 122A                     l2661 0FFA                     l2645 0F9A  
                   l2637 0F66                     l2581 0DB0                     l2565 0D6E  
                   l2493 0B84                     l2477 0B1A                     l2743 127E  
                   l2719 1180                     l2735 1248                     l2639 0F70  
                   l2567 0D74                     l2487 0B72                     l2751 12BE  
                   l2737 1254                     l2729 11F4                     l2497 0B94  
                   l2489 0B7C                     l2739 1258                     l2667 1012  
                   l2675 1038                     l2579 0DAA                     l2595 0DE6  
                   l2499 0BAC                     l2685 106E                     l2597 0E04  
                   l2749 12A2                     l2757 12D0                     l2861 147A  
                   l2837 1446                     l2695 10AC                     l2679 104A  
                   l2767 131E                     l2855 146E                     l2689 1092  
                   l2777 136C                     l2865 148A                     l2857 1472  
                   l2789 13CE                     STR_1 0889                     STR_2 0855  
                   STR_3 0843                     STR_4 081F                     STR_5 0831  
                   STR_6 08A6                     STR_7 089A                     STR_8 08B1  
                   STR_9 0867                     u2030 0BD4                     u2037 0BCA  
                   u2441 1104                     u2290 0F1C                     u2607 1832  
                   u2617 1820                     u2627 1842                     u1960 0B14  
                   u1967 0B0A                     i1l75 0086      __end_of_AlternaModo 15B0  
         ??_AtualizaTela 002E                     _TMR0 000FD6                     _cont 0033  
                   _main 13E4                     _init 184E                     _tela 0037  
                   _temp 002F                     fsr0h 000FEA                     fsr1h 000FE2  
                   indf0 000FEF                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0049   __size_of_WriteDataXLCD 003E                     prodh 000FF4  
                   prodl 000FF3                     start 00CE             ___param_bank 000000  
            _Delay10TCYx 183E             _WriteCmdXLCD 1696              _Delay1KTCYx 182E  
          ?_SetDDRamAddr 0001                    ?_main 0001                    ?_init 0001  
                  STR_10 0878          __end_of___lwdiv 1602          __end_of___lwmod 1696  
                  _PORTB 000F81                    _TRISB 000F93                    _TRISC 000F94  
  __size_of_Delay10KTCYx 0016          __end_of_dpowers 0817                    _erros 0035  
        __end_of_isdigit 17FE          __end_of_pic_ist 00CE                    pclath 000FFA  
                  tablat 000FF5                    status 000FD8          __end_of_sprintf 12CC  
        __initialization 17FE             __end_of_main 149C             __end_of_init 185C  
       __end_of_BusyXLCD 174C             _Delay10KTCYx 1818    __size_of_DelayPORXLCD 0008  
         ??_SetDDRamAddr 0015         __end_of_OpenXLCD 1540                   ??_main 002F  
                 ??_init 0014            __activetblptr 000002            _WriteDataXLCD 16D4  
            _AlternaModo 1540                   _ADCON1 000FC1                   i1l1701 007C  
                 i1l1641 1572                   i1l1633 155A                   i1l1625 1542  
                 i1l1651 158A                   i1l1699 0078                   _TMR0IF 007F92  
           _DelayPORXLCD 185C                   ___wmul 177A                ??___lwdiv 0018  
              ??___lwmod 001F                   _estado 0047                   clear_0 1804  
   __end_of_AtualizaTela 13E4           ?_WriteDataXLCD 0001                ??_isdigit 0014  
              ??_pic_ist 0003         ??_config_inicial 0014             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_sprintf 002A               __accesstop 0060  __end_of__initialization 180A  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
 __size_of_DelayFor18TCY 0008             sprintf@width 0070                ?_BusyXLCD 0001  
        WriteCmdXLCD@cmd 0015     __end_of_SetDDRamAddr 1654       __size_of_init_XLCD 001E  
             __pnvCOMRAM 0047                ?_OpenXLCD 0001        WriteDataXLCD@data 0015  
           ?_Delay10TCYx 0001                  ?___wmul 0014          ??_WriteDataXLCD 0015  
           ?_Delay1KTCYx 0001       __size_of_putrsXLCD 002E               ??_BusyXLCD 0015  
             ??_OpenXLCD 0019                  __Hparam 0000                  __Lparam 0000  
  __size_of_AtualizaTela 0118            _DelayFor18TCY 1864          __size_of___wmul 0026  
                ___lwdiv 15B0                  ___lwmod 1654             __psmallconst 0800  
                _acertos 0036                  __pcinit 17FE          putrsXLCD@buffer 0016  
        Delay10TCYx@unit 0014                  __ramtop 0800                  __ptext0 13E4  
                __ptext1 17C2                  __ptext2 149C                  __ptext3 1696  
                __ptext4 185C                  __ptext5 182E                  __ptext6 1818  
                __ptext7 184E                  __ptext8 17A0                  __ptext9 12CC  
      __end_of_init_XLCD 17E0                _T0CONbits 000FD5        __end_of_hexpowers 081F  
                _dpowers 080D                  _isdigit 17E0                  _pic_ist 0018  
           ?_AlternaModo 0001                  _sprintf 08BA     end_of_initialization 180A  
      __end_of_octpowers 080D             _AtualizaTela 12CC            __Lmediumconst 0000  
         ?_DelayFor18TCY 0001                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE        __end_of_putrsXLCD 177A                _PORTDbits 000F83  
              _TRISBbits 000F93                _TRISCbits 000F94    __size_of_SetDDRamAddr 0052  
  AtualizaTela@flag_tela 002E           __end_of___wmul 17A0     __size_of_Delay10TCYx 0010  
           _SetDDRamAddr 1602     __size_of_Delay1KTCYx 0010       SetDDRamAddr@DDaddr 0018  
    start_initialization 17FE        __size_of_BusyXLCD 003A          ??_DelayFor18TCY 0015  
      __size_of_OpenXLCD 00A4                 ??___wmul 0018            ?_WriteCmdXLCD 0001  
            __pbssCOMRAM 002F            __pcstackBANK0 0060     __size_of_AlternaModo 0070  
        Delay1KTCYx@unit 0014              sprintf@flag 0073              sprintf@prec 006F  
__size_of_config_inicial 0022         ___lwdiv@dividend 0014           ??_WriteCmdXLCD 0015  
              _flag_tela 0031            ?_Delay10KTCYx 0001                 ?___lwdiv 0014  
               ?___lwmod 001B              __pintcodelo 0018    __end_of_WriteDataXLCD 1712  
            __smallconst 0800                 ?_isdigit 0001                 ?_pic_ist 0001  
              _init_XLCD 17C2                _hexpowers 0817         ___lwdiv@quotient 0019  
               ?_sprintf 0020           ___wmul@product 0018                 _LATBbits 000F8A  
               _LATCbits 000F8B                _octpowers 0801            ?_DelayPORXLCD 0001  
        OpenXLCD@lcdtype 0019           ??_Delay10KTCYx 0014        ___wmul@multiplier 0014  
              _putrsXLCD 174C         Delay10KTCYx@unit 0015               ?_init_XLCD 0001  
               _BusyXLCD 1712           ??_DelayPORXLCD 0015                 _OpenXLCD 149C  
               __Hrparam 0000                 __Lrparam 0000         __size_of___lwdiv 0052  
       __size_of___lwmod 0042              _isdigit$940 0015               sprintf@idx 0060  
             sprintf@len 0069               sprintf@val 006D               ?_putrsXLCD 0016  
       __size_of_isdigit 001E         __size_of_pic_ist 00B6          ___lwdiv@divisor 0016  
        ___lwdiv@counter 0018                 __ptext10 08BA                 __ptext11 17E0  
               __ptext20 183E                 __ptext12 177A                 __ptext13 1654  
               __ptext22 1540                 __ptext14 15B0                 __ptext15 174C  
               __ptext16 16D4                 __ptext17 1712                 __ptext18 1602  
               __ptext19 1864     __end_of_WriteCmdXLCD 16D4         __size_of_sprintf 0A12  
         _config_inicial 17A0            __size_of_main 00B8            __size_of_init 000E  
          ??_Delay10TCYx 0014                 int$flags 0049            ??_Delay1KTCYx 0014  
             _INTCONbits 000FF2              ??_init_XLCD 001A                 isdigit@c 0016  
   __end_of_Delay10KTCYx 182E   __end_of_config_inicial 17C2                 intlevel1 0000  
              sprintf@ap 006B                sprintf@cp 0067                sprintf@sp 0020  
       ___lwmod@dividend 001B    __end_of_DelayFor18TCY 186C      __end_of_Delay10TCYx 184E  
               sprintf@c 0072                 sprintf@f 0022     __end_of_DelayPORXLCD 1864  
            ??_putrsXLCD 0018          ___lwmod@divisor 001D            ??_AlternaModo 0001  
    __end_of_Delay1KTCYx 183E          ___lwmod@counter 001F          ?_config_inicial 0001  
          ?_AtualizaTela 0001  
