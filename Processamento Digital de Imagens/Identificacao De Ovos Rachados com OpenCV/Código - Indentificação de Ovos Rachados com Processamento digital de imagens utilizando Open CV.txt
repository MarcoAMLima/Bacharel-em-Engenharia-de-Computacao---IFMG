#include <iostream> //bibliotecas para utilização de cout e endl
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>

 using namespace cv;
 using namespace std;

 void thresh_callback(Mat image){
    int thresh = 100;
    int max_thresh = 255;
    Mat threshold_output;
    vector<vector<Point> > contours;
    vector<Vec4i> hierarchy;

    /// Detect edges using Threshold
    threshold( image, threshold_output, thresh, 255, THRESH_BINARY );
    /// Find contours
    findContours( threshold_output, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );

    /// Approximate contours to polygons + get bounding rects and circles
    vector<vector<Point> > contours_poly( contours.size() );
    vector<Rect> boundRect( contours.size() );
    vector<Point2f>center( contours.size() );
    vector<float>radius( contours.size() );

    for( int i = 0; i < contours.size(); i++ )
        {
            approxPolyDP( Mat(contours[i]), contours_poly[i], 3, true );
            boundRect[i] = boundingRect( Mat(contours_poly[i]) );
            minEnclosingCircle( (Mat)contours_poly[i], center[i], radius[i] );
        }

    /// Draw polygonal contour + bonding rects + circles
    Mat drawing = Mat::zeros( threshold_output.size(), CV_8UC3 );
    for( int i = 0; i< contours.size(); i++ )
        {
            Scalar color = Scalar( 0, 255, 0);
            drawContours( drawing, contours_poly, i, color, 1, 8, vector<Vec4i>(), 0, Point() );
            rectangle( drawing, boundRect[i].tl(), boundRect[i].br(), color, 2, 8, 0 );
            //circle( drawing, center[i], (int)radius[i], color, 2, 8, 0 );
        }

    /// Show in a window
    namedWindow( "Contours", CV_WINDOW_AUTOSIZE );
    imshow( "Contours", drawing );
}

 ///Retorna a quantidade de pixels encontrada na imagem binaria
 int ContabilizarPixels(Mat imagem){
    Mat dst;
    float aux;
    imagem.convertTo(dst, CV_8U);
    vector<vector<Point> > contours;
    vector<Vec4i> hierarchy;
    RNG rng(12345);
    findContours(dst, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );
    // Draw contours
    Mat drawing = Mat::zeros(dst.size(), CV_8UC3 );
    int b;
    for( int i = 0; i< contours.size(); i++ ){
        Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
        drawContours( drawing, contours, i, color, 2, 8, hierarchy, 0, Point() );
        b = contourArea(contours[i]);//contabiliza o numero de pixels da imagem
    }
    aux = b;
    namedWindow("Imagem findContours", WINDOW_AUTOSIZE);
    imshow("Imagem findContours", drawing);
    return aux;
 }

 int main(int argc, char *argv[])
{
        ///Declaracao de variaveis
        Mat ioriginal; //Armazena a imagem original
        Mat cinza; //Armazena a imagem em escala de cinza
        Mat isobel; //Armazena a imagem do filtro de sobel
        Mat abs_grad_x, abs_grad_y,grad_x, grad_y; // utilizado no filtro de sobel
        int ddepth = CV_16S, scale = 1,delta = 0; // utilizado no filtro de sobel
        Mat ibinaria; //Armazena a imagem binaria que contem as rachaduras
        Mat igaussiana; //Armazena a imagem com o filtro de gaussiana
        Mat ibinaria2; //Armazena a imagem binaria que ignora rachaduras
        float ovo, rachadura,aux;//armazena a quantidade de pixels da imagem com contornos das duas situacoes
        Mat resultado; //imagem final

        ///Abertura da imagem
        const string img = "output.jpg";//img string auxiliar
        ioriginal = imread(img, 1);

        ///Verificacao se a imagem abriu corretamente
        if (!ioriginal.data){
                cout << "Nao foi possivel abrir a imagem " << img << endl;
                return -1;
        }else{
                ///Imagem Original
                    namedWindow("Imagem Original", WINDOW_AUTOSIZE);
                    imshow("Imagem Original", ioriginal);

                ///Passar a imagem para a escala de cinza
                    cvtColor (ioriginal, cinza, COLOR_BGR2GRAY);
                ///Escala de Cinza
                    namedWindow("Escala de Cinza", WINDOW_AUTOSIZE);
                    imshow("Escala de Cinza", cinza);

                ///Processo de deteccao de rachaduras
                ///Passagem do filtro de Sobel para deteccao de bordas
                    /// Gradiente X para o filtro de Sobel
                        Sobel( cinza, grad_x, ddepth, 1, 0, 3, scale, delta, BORDER_DEFAULT );
                        convertScaleAbs( grad_x, abs_grad_x );
                    /// Gradiente Y para o filtro de Sobel
                        Sobel( cinza, grad_y, ddepth, 0, 1, 3, scale, delta, BORDER_DEFAULT );
                        convertScaleAbs( grad_y, abs_grad_y );
                    /// Gradiente Total Aproximado
                        addWeighted( abs_grad_x, 0.5, abs_grad_y, 0.5, 0, isobel );
                    ///Filtro de Sobel
                        imshow( "Filtro de Sobel", isobel );
                    /// filtro binario
                        threshold(isobel, ibinaria, 40, 255, CV_THRESH_BINARY | CV_THRESH_BINARY);
                        ///Imagem Binaria
                            namedWindow("Binaria com rachaduras", WINDOW_AUTOSIZE);
                            imshow("Binaria com rachaduras", ibinaria);

                ///Processo para ignorar as rachaduras e encontrar ovo
                    ///aplicacao do filtro gaussiana para borrar a imagem
                        GaussianBlur(cinza, igaussiana,Size(9,9),0);
                    ///Imagem gaussiana
                        namedWindow("Gaussiana", WINDOW_AUTOSIZE);
                        imshow("Gaussiana", igaussiana);
                    ///2º binaria ignorar a rachadura para encontrar o do ovo
                        threshold(igaussiana, ibinaria2, 40, 255, CV_THRESH_BINARY | CV_THRESH_BINARY);
                        ///Imagem Binaria 2
                            namedWindow("Imagem Binaria sem rachaduras", WINDOW_AUTOSIZE);
                            imshow("Imagem Binaria sem rachaduras", ibinaria2);
                    ///Encontrar a quantidade de pixels que o ovo ocupa
                        ovo = ContabilizarPixels(ibinaria2);
                        cout << "Quantidade de pixels que o ovo ocupa na imagem: " << ovo << endl;

                    ///tratamento de outliers, ignorar o contorno do ovo que e detectado pelo sobel, e respingos
                        ///Achar a borda do ovo
                            ///filtro canny para detectar o contorno
                                ///imagem canny
                                Canny(ibinaria2, resultado, 50, 200, 3 );
                                namedWindow("Canny", WINDOW_AUTOSIZE);
                                imshow("Canny", resultado);
                                Mat element = getStructuringElement( MORPH_CROSS,Size(9 , 9),Point( 1, 1 ) );
                                ///dilatação da borda encontrada
                                dilate( resultado, resultado, element );
                                ///Borda do Ovo
                                namedWindow("Borda do Ovo", WINDOW_AUTOSIZE);
                                imshow("Borda do Ovo", resultado);
                                ///Subtracao da (borda do ovo - rachaduras)
                                resultado = ibinaria - resultado;
                                ///borrar a imagem de modo que apenas a rachadura seja visivel
                                medianBlur(resultado,resultado,3);
                                namedWindow("Gaussiana 2", WINDOW_AUTOSIZE);
                                imshow("Gaussiana 2", resultado);
                                ///remover respingos
                                Mat element2 = getStructuringElement( MORPH_CROSS,Size(3 , 3),Point( 1, 1 ) );
                                erode(resultado,resultado,element2);
                                dilate(resultado,resultado,element2);
                                ///Apenas rachadura
                                imshow("Apenas Rachadura", resultado);

                    ///Encontrar a quantidade de pixels que a rachadura ocupa
                        rachadura = ContabilizarPixels(resultado);
                        cout << "Quantidade de pixels que a rachadura ocupa na imagem: " << rachadura << endl;

                    ///% aproximada da rachadura do ovo
                        aux = (rachadura*100.0)/ovo;
                        cout << "Porcenagem aproximada da rachadura: " << aux << "%"<< endl;

                    ///localizar a rachadura com Bounding boxes
                    thresh_callback(resultado);
        }
        waitKey(0);
        return 0;
}
